2018/09/18-11:32 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on szdeMacBook-Pro.local with PID 6816 (/Users/sz/yunlis/lis_api/target/classes started by sz in /Users/sz/yunlis)
2018/09/18-11:32 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/09/18-11:32 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/09/18-11:32 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/09/18-11:32 [restartedMain] WARN  org.springframework.boot.autoconfigure.thymeleaf.AbstractTemplateResolverConfiguration- Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2018/09/18-11:32 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 24.741 seconds (JVM running for 30.906)
2018/12/27-09:13 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14800 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:13 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:13 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:13 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:13 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 8.989 seconds (JVM running for 11.455)
2018/12/27-09:28 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3840 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:28 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:28 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:28 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:29 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.777 seconds (JVM running for 9.666)
2018/12/27-09:30 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 6660 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:30 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:30 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:30 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:30 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.254 seconds (JVM running for 11.597)
2018/12/27-09:31 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 6660 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:31 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:31 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:31 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8364 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:31 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:31 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:31 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:31 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.429 seconds (JVM running for 12.244)
2018/12/27-09:36 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10092 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:36 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:36 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:36 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:36 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 8.167 seconds (JVM running for 10.2)
2018/12/27-09:42 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:42 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:42 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:42 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:42 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.767 seconds (JVM running for 10.487)
2018/12/27-09:42 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2268 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:42 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:42 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:43 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:43 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.474 seconds (JVM running for 15.411)
2018/12/27-09:45 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1144 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:45 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:45 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:45 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:45 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.536 seconds (JVM running for 9.346)
2018/12/27-09:55 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13368 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:55 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:55 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:55 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:56 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 13.839 seconds (JVM running for 17.843)
2018/12/27-09:56 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7200 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-09:56 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-09:56 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-09:56 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-09:56 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.784 seconds (JVM running for 8.694)
2018/12/27-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-09:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-09:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-09:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-09:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-09:59 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:10 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:11 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:24 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:29 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:31 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:32 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:32 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:33 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 管理员登录....................
2018/12/27-10:40 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14992 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-10:40 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-10:40 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-10:40 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-10:40 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.626 seconds (JVM running for 14.488)
2018/12/27-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:55 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 管理员登录------------------------------------
2018/12/27-10:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:56 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 管理员登录------------------------------------
2018/12/27-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-10:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 管理员登录------------------------------------
2018/12/27-10:59 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13692 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-10:59 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-10:59 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-10:59 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-10:59 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.221 seconds (JVM running for 11.335)
2018/12/27-11:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:00 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:00 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- User [Hash = 70454689, userId=3, username=cxf10, avatarurl=http://bmob-cdn-15555.b0.upaiyun.com/2018/01/09/e155570340eb843b80af3a7625c39542.jpg, authority=1, password=123456, account=123456, serialVersionUID=1]------------------------------------
2018/12/27-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- User [Hash = 70454689, userId=3, username=cxf10, avatarurl=http://bmob-cdn-15555.b0.upaiyun.com/2018/01/09/e155570340eb843b80af3a7625c39542.jpg, authority=1, password=123456, account=123456, serialVersionUID=1]------------------------------------
2018/12/27-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- User [Hash = 70454689, userId=3, username=cxf10, avatarurl=http://bmob-cdn-15555.b0.upaiyun.com/2018/01/09/e155570340eb843b80af3a7625c39542.jpg, authority=1, password=123456, account=123456, serialVersionUID=1]------------------------------------
2018/12/27-11:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- User [Hash = 70454689, userId=3, username=cxf10, avatarurl=http://bmob-cdn-15555.b0.upaiyun.com/2018/01/09/e155570340eb843b80af3a7625c39542.jpg, authority=1, password=123456, account=123456, serialVersionUID=1]------------------------------------
2018/12/27-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:11 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:11 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- User [Hash = 70454689, userId=3, username=cxf10, avatarurl=http://bmob-cdn-15555.b0.upaiyun.com/2018/01/09/e155570340eb843b80af3a7625c39542.jpg, authority=1, password=123456, account=123456, serialVersionUID=1]------------------------------------
2018/12/27-11:12 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14124 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-11:12 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-11:12 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-11:12 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-11:12 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.73 seconds (JVM running for 14.206)
2018/12/27-11:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:13 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-11:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:13 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-11:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:15 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-11:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:17 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:19 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:19 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-11:20 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12084 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-11:20 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-11:20 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-11:20 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-11:20 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.938 seconds (JVM running for 10.077)
2018/12/27-11:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:23 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:23 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:23 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-11:23 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12556 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-11:23 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-11:23 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-11:23 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-11:23 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.765 seconds (JVM running for 13.428)
2018/12/27-11:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:25 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:25 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:25 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 9520 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-11:25 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-11:25 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-11:25 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-11:26 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.175 seconds (JVM running for 11.488)
2018/12/27-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:26 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:26 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:27 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12980 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-11:27 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-11:27 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-11:27 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-11:27 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.014 seconds (JVM running for 11.904)
2018/12/27-11:31 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11868 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-11:31 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-11:31 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-11:31 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-11:31 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.424 seconds (JVM running for 14.697)
2018/12/27-11:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:32 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:32 [http-nio-12080-exec-2] INFO  org.hzqisheng.interceptor.MyInterceptor- null------------------------------------
2018/12/27-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:32 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-11:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-11:35 [http-nio-12080-exec-7] INFO  org.hzqisheng.interceptor.MyInterceptor- User [Hash = 70454689, userId=3, username=cxf10, avatarurl=http://bmob-cdn-15555.b0.upaiyun.com/2018/01/09/e155570340eb843b80af3a7625c39542.jpg, authority=1, password=123456, account=123456, serialVersionUID=1]------------------------------------
2018/12/27-11:35 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-14:24 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12964 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-14:24 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-14:24 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-14:24 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-14:24 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.676 seconds (JVM running for 15.036)
2018/12/27-14:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-14:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-14:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-14:24 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-14:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-14:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-14:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-14:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-14:27 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5644 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-14:27 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-14:27 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-14:27 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-14:27 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.59 seconds (JVM running for 14.052)
2018/12/27-14:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-14:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2018/12/27-14:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-14:28 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-14:28 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.insertSelective- ==>  Preparing: insert into user ( username, avatarUrl, authority, `password`, account ) values ( ?, ?, ?, ?, ? ) 
2018/12/27-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.insertSelective- ==> Parameters: 冰残绝恋(String), https://wx.qlogo.cn/mmopen/vi_32/YOuw0zia8s4pk7yz4XXqIkyQAlyzDzib8m1tHibiaCkiaSOH5BpTOSybBQbKOR7zd8HNiczQkialNLktfkWoaA8XPArkA/132(String), 1(Integer), 123456(String), cxy123(String)
2018/12/27-15:01 [http-nio-12080-exec-4] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'avatarUrl' at row 1
### The error may involve org.lis_dao.UserDao.insertSelective-Inline
### The error occurred while setting parameters
### SQL: insert into user      ( username,                       avatarUrl,                       authority,                       `password`,                       account )       values ( ?,                       ?,                       ?,                       ?,                       ? )
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'avatarUrl' at row 1
; SQL []; Data truncation: Data too long for column 'avatarUrl' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'avatarUrl' at row 1] with root cause
com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'avatarUrl' at row 1
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3971)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2490)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy89.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy87.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:57)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy77.insertSelective(Unknown Source)
	at org.hzqisheng.service.Impl.UserServiceImpl.addUser(UserServiceImpl.java:37)
	at org.hzqisheng.controller.UserController.register(UserController.java:84)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/27-15:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.insertSelective- ==>  Preparing: insert into user ( username, avatarUrl, authority, `password`, account ) values ( ?, ?, ?, ?, ? ) 
2018/12/27-15:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.insertSelective- ==> Parameters: 冰残绝恋(String), https://wx.qlogo.cn/mmopen/vi_32/YOuw0zia8s4pk7yz4XXqIkyQAlyzDzib8m1tHibiaCkiaSOH5BpTOSybBQbKOR7zd8HNiczQkialNLktfkWoaA8XPArkA/132(String), 1(Integer), 123456(String), cxy123(String)
2018/12/27-15:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.insertSelective- <==    Updates: 1
2018/12/27-15:04 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户注册------------------------------------
2018/12/27-15:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.insertSelective- ==>  Preparing: insert into user ( username, avatarUrl, authority, `password`, account ) values ( ?, ?, ?, ?, ? ) 
2018/12/27-15:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.insertSelective- ==> Parameters: 冰残绝恋(String), https://wx.qlogo.cn/mmopen/vi_32/YOuw0zia8s4pk7yz4XXqIkyQAlyzDzib8m1tHibiaCkiaSOH5BpTOSybBQbKOR7zd8HNiczQkialNLktfkWoaA8XPArkA/132(String), 1(Integer), 123456(String), cxy123(String)
2018/12/27-15:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.insertSelective- <==    Updates: 1
2018/12/27-15:10 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户注册------------------------------------
2018/12/27-15:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:10 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:11 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-15:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:11 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:12 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:12 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:13 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:16 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:16 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-15:16 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:16 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:16 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:16 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:39 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10196 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-15:39 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-15:39 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-15:39 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-15:40 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 13.208 seconds (JVM running for 16.275)
2018/12/27-15:42 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 15188 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-15:42 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-15:42 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-15:42 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-15:42 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 20.114 seconds (JVM running for 23.64)
2018/12/27-15:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:45 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:46 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12416 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-15:46 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-15:46 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-15:46 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-15:46 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.422 seconds (JVM running for 18.933)
2018/12/27-15:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:47 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-15:47 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10712 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-15:47 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-15:47 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-15:47 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-15:48 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.745 seconds (JVM running for 19.007)
2018/12/27-15:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.FeedbackDao.insertSelective- ==>  Preparing: insert into feedback ( feedback_content, contact, creat_time ) values ( ?, ?, ? ) 
2018/12/27-15:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.FeedbackDao.insertSelective- ==> Parameters: 不错哦(String), 12(String), 2018-12-27 15:48:17.433(Timestamp)
2018/12/27-15:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.FeedbackDao.insertSelective- <==    Updates: 1
2018/12/27-15:48 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 提交用户反馈------------------------------------
2018/12/27-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.FeedbackDao.insertSelective- ==>  Preparing: insert into feedback ( user_id, feedback_content, contact, creat_time ) values ( ?, ?, ?, ? ) 
2018/12/27-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.FeedbackDao.insertSelective- ==> Parameters: -1(Long), 1(String), 1(String), 2018-12-27 15:51:38.787(Timestamp)
2018/12/27-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.FeedbackDao.insertSelective- <==    Updates: 1
2018/12/27-15:51 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 提交用户反馈------------------------------------
2018/12/27-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.FeedbackDao.insertSelective- ==>  Preparing: insert into feedback ( user_id, feedback_content, contact, creat_time ) values ( ?, ?, ?, ? ) 
2018/12/27-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.FeedbackDao.insertSelective- ==> Parameters: -1(Long), 不错哦(String), 1(String), 2018-12-27 15:54:24.802(Timestamp)
2018/12/27-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.FeedbackDao.insertSelective- <==    Updates: 1
2018/12/27-15:54 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 提交用户反馈------------------------------------
2018/12/27-15:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-15:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-15:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-15:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:22 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2018/12/27-16:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:22 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:23 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy(String)
2018/12/27-16:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2018/12/27-16:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 12(String)
2018/12/27-16:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2018/12/27-16:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:25 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:30 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:30 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:30 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:30 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:33 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:33 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2018/12/27-16:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2018/12/27-16:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2018/12/27-16:36 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2018/12/27-16:38 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10712 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-16:38 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-16:38 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-16:38 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-16:38 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.644 seconds (JVM running for 3035.784)
2018/12/27-16:39 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10712 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-16:39 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-16:39 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-16:40 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-16:40 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.239 seconds (JVM running for 3141.443)
2018/12/27-16:40 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10712 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-16:40 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-16:40 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-16:40 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-16:40 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.945 seconds (JVM running for 3190.45)
2018/12/27-16:45 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10712 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-16:45 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-16:45 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-16:45 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-16:45 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.908 seconds (JVM running for 3497.792)
2018/12/27-16:47 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10712 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-16:47 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-16:47 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-16:47 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-16:47 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.684 seconds (JVM running for 3562.701)
2018/12/27-16:49 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 560 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-16:49 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-16:49 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-16:49 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-16:50 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8952 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-16:50 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-16:50 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-16:50 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-16:50 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.896 seconds (JVM running for 15.456)
2018/12/27-16:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-16:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-16:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-16:51 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:00 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8344 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/27-17:00 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/27-17:00 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/27-17:00 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/27-17:00 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 14.133 seconds (JVM running for 16.917)
2018/12/27-17:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:02 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:07 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:10 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:12 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:13 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:13 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:16 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:16 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:17 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:17 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/27-17:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/27-17:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/27-17:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/27-17:18 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:00 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8212 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-09:00 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-09:00 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-09:00 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-09:00 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.44 seconds (JVM running for 14.149)
2018/12/28-09:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:40 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:41 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:43 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:43 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:43 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:43 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:43 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:44 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:46 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:48 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:48 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:48 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:48 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:48 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:49 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-09:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-09:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-09:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-09:59 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:05 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 668 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:05 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:05 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:06 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:06 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 14.793 seconds (JVM running for 17.721)
2018/12/28-11:09 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12976 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:09 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:09 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:09 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:09 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 13.98 seconds (JVM running for 17.131)
2018/12/28-11:12 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7692 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:12 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:12 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:12 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:12 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.756 seconds (JVM running for 15.166)
2018/12/28-11:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:13 [http-nio-12080-exec-6] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:14 [http-nio-12080-exec-7] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-11:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:14 [http-nio-12080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-11:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:15 [http-nio-12080-exec-5] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:16 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7692 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:16 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:16 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:16 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:16 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.623 seconds (JVM running for 246.036)
2018/12/28-11:19 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7692 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:19 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:19 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:19 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:19 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 2.782 seconds (JVM running for 472.053)
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:20 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:68) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]
2018/12/28-11:22 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7692 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:22 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:22 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:22 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:22 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.491 seconds (JVM running for 611.262)
2018/12/28-11:23 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7692 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:23 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:23 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:23 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1796 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:23 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:23 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:23 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:23 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.161 seconds (JVM running for 16.482)
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:23 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:25 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12060 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:25 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:25 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:25 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:25 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 17.185 seconds (JVM running for 20.616)
2018/12/28-11:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:25 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:30 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:30 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:30 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:30 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:44 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:44 [http-nio-12080-exec-8] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:44 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-11:44 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-11:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:47 [http-nio-12080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:47 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:47 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-11:47 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:49 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 1(Long)
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 1(Long), 0(Integer), 5(Integer)
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/28-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-11:52 [http-nio-12080-exec-5] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-11:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:52 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:52 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:52 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:52 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:53 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:53 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:53 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:53 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:53 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-11:54 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 4400 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-11:54 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-11:54 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-11:54 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-11:55 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 13.518 seconds (JVM running for 16.432)
2018/12/28-11:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-11:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-11:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-11:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-11:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-11:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-11:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-11:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-11:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-11:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 2
2018/12/28-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 5
2018/12/28-13:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-13:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-13:11 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-13:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-13:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-13:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 5
2018/12/28-13:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-13:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:12 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 5
2018/12/28-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 5
2018/12/28-13:31 [http-nio-12080-exec-10] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: -2(Long)
2018/12/28-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-13:31 [http-nio-12080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-13:32 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 5
2018/12/28-13:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:56 [http-nio-12080-exec-8] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-13:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:56 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:56 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-13:56 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-13:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:56 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:57 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11796 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-13:57 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-13:57 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-13:57 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-13:57 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.739 seconds (JVM running for 18.94)
2018/12/28-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:57 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-13:57 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-13:57 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-13:59 [http-nio-12080-exec-6] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-13:59 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-13:59 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-13:59 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-13:59 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-13:59 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-13:59 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-14:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: -2(Long)
2018/12/28-14:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:00 [http-nio-12080-exec-9] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-14:01 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11796 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:01 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:01 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:01 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:01 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.227 seconds (JVM running for 258.8)
2018/12/28-14:03 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 6744 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:03 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:03 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:03 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:03 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 16.081 seconds (JVM running for 19.149)
2018/12/28-14:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: -2(Long)
2018/12/28-14:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:03 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-14:04 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 15056 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:04 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:04 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:04 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:04 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.782 seconds (JVM running for 13.828)
2018/12/28-14:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684128, categoryId=-2, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: -2(Long)
2018/12/28-14:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:04 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-14:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 5(Integer)
2018/12/28-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 5
2018/12/28-14:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684128, categoryId=1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 1(Long)
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 1(Long), 0(Integer), 5(Integer)
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/28-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:05 [http-nio-12080-exec-5] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:07 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:07 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:10 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:10 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:10 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:10 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:10 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:10 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:10 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:12 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:12 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:12 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:13 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:13 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:13 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:15 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:15 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:16 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:16 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:16 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:16 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:16 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:16 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:16 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:17 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:17 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:17 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:17 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:17 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:18 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:18 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:18 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:18 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:18 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:18 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:21 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:22 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:22 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:22 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 684097, categoryId=-1, categoryName=全部, serialVersionUID=1]-----------------
2018/12/28-14:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:22 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 992, categoryId=1, categoryName=, serialVersionUID=1]-----------------
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 1(Long)
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/28-14:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:22 [http-nio-12080-exec-6] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.GeneratedMethodAccessor100.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-14:22 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-14:22 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-14:23 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- Category [Hash = 1162392176, categoryId=1, categoryName=测试标签1, serialVersionUID=1]-----------------
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 1(Long)
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 1(Long), 0(Integer), 5(Integer)
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/28-14:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:23 [http-nio-12080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.GeneratedMethodAccessor100.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-14:26 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 15056 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:26 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:26 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:26 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:26 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 8.899 seconds (JVM running for 1348.244)
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 1(Long)
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 1(Long), 0(Integer), 5(Integer)
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/28-14:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:28 [http-nio-12080-exec-8] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]
2018/12/28-14:28 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7064 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:28 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:28 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:28 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:29 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 14.55 seconds (JVM running for 18.408)
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) 
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 1(Long)
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/28-14:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) 
2018/12/28-14:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long)
2018/12/28-14:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-14:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:30 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7064 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:30 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:30 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:30 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:30 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.815 seconds (JVM running for 86.501)
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:33 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]
2018/12/28-14:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:35 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:36 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:37 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:37 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:37 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:37 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:37 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:37 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-14:37 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:39 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-14:39 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-14:39 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:42 [http-nio-12080-exec-8] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) ~[tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.15.jar:8.5.15]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]
2018/12/28-14:42 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7064 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:42 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:42 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:42 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
2018/12/28-14:42 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@4509accb: startup date [Fri Dec 28 14:42:48 GMT+08:00 2018]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2018/12/28-14:42 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2018/12/28-14:43 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7064 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:43 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:43 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:43 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:43 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.754 seconds (JVM running for 864.793)
2018/12/28-14:45 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:45 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:45 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14920 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:46 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.671 seconds (JVM running for 19.057)
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:46 [http-nio-12080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 6744 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-14:46 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-14:46 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.945 seconds (JVM running for 14.777)
2018/12/28-14:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article_category WHERE (category_id = ?) 
2018/12/28-14:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- ==> Parameters: 2(Long)
2018/12/28-14:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-14:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( category_id = ? ) limit ?,? 
2018/12/28-14:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-14:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 1
2018/12/28-14:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-14:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-14:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-14:50 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page] with root cause
java.lang.ClassCastException: java.util.ArrayList cannot be cast to com.github.pagehelper.Page
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-15:18 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:18 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:18 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-15:18 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-15:18 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.457 seconds (JVM running for 14.866)
2018/12/28-15:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 5(Integer)
2018/12/28-15:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/28-15:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 5(Integer)
2018/12/28-15:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:18 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:18 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/28-15:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:19 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 4(Long)
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 4(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 4(Long)
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 4(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 4(Long)
2018/12/28-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 4(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/28-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:19 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:19 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:19 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:19 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:21 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:22 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/28-15:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:22 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:22 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:22 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:22 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:22 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:22 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:28 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:28 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:28 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:28 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/28-15:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/28-15:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:28 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:28 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:28 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-15:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-15:28 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:29 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:29 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:29 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/28-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:29 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/28-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/28-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/28-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/28-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/28-15:29 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:29 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:48 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:48 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:48 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:48 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:48 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-15:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-15:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-15:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-15:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:49 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-15:49 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-15:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-15:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-15:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-15:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-15:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-15:49 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-15:51 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:51 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:51 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-15:51 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-15:52 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.545 seconds (JVM running for 2044.839)
2018/12/28-15:52 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:52 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:52 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-15:52 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-15:52 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.441 seconds (JVM running for 2058.827)
2018/12/28-15:56 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:56 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:56 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-15:56 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-15:56 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 2.666 seconds (JVM running for 2293.649)
2018/12/28-15:58 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5140 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:58 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:58 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-15:58 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-15:58 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 16.965 seconds (JVM running for 20.993)
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8560 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:59 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12728 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:59 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 18.025 seconds (JVM running for 21.679)
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-15:59 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2018/12/28-15:59 [restartedMain] ERROR org.apache.coyote.http11.Http11NioProtocol- Failed to start end point associated with ProtocolHandler ["http-nio-12080"]
java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:978)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:628)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1022)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:250)
	at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:193)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107)
	at org.hzqisheng.Application.main(Application.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2018/12/28-15:59 [restartedMain] ERROR org.apache.catalina.core.StandardService- Failed to start connector [Connector[HTTP/1.1-12080]]
org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-12080]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:167)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedConnectors(TomcatEmbeddedServletContainer.java:250)
	at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.start(TomcatEmbeddedServletContainer.java:193)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.startEmbeddedServletContainer(EmbeddedWebApplicationContext.java:297)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:145)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107)
	at org.hzqisheng.Application.main(Application.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.apache.catalina.LifecycleException: service.getName(): "Tomcat";  Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1029)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 18 common frames omitted
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:978)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:628)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1022)
	... 19 common frames omitted
2018/12/28-15:59 [restartedMain] ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter- 

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 12080 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 12080, or configure this application to listen on another port.

2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11908 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-15:59 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-15:59 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8908 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-16:00 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12200 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/28-16:00 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/28-16:00 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.575 seconds (JVM running for 15.321)
2018/12/28-16:02 [http-nio-12080-exec-1] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause
java.lang.NullPointerException: null
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2018/12/28-16:02 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: ""7""
2018/12/28-16:02 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: ""7""
2018/12/28-16:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:03 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:03 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:07 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:07 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:07 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.bind.MissingServletRequestParameterException: Required Long parameter 'articleId' is not present
2018/12/28-16:07 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-16:07 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:08 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.bind.MissingServletRequestParameterException: Required Long parameter 'articleId' is not present
2018/12/28-16:08 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/28-16:08 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/28-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:12 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:13 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:13 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:13 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:14 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/28-16:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2018/12/28-16:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:15 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:15 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:39 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:39 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:41 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:41 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:50 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:50 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:50 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/28-16:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/28-16:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/28-16:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/28-16:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/28-16:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/28-16:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/28-16:54 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/28-16:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/28-16:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/28-16:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/28-16:54 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/28-16:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/28-16:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/28-16:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:22 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13968 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-09:22 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-09:22 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-09:22 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-09:22 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.904 seconds (JVM running for 14.4)
2018/12/29-09:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:22 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:22 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:23 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:23 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:25 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:25 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:25 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:26 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:26 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:28 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:28 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:30 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:30 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:30 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:30 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:30 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:31 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:33 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:33 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:33 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:33 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:35 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:35 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:38 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:38 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:38 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:38 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:38 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:38 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:38 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:38 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-09:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-09:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-09:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-09:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-09:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-09:39 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-09:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-09:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-09:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-09:39 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-09:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-09:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-09:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-09:44 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13968 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-09:44 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-09:44 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-09:44 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-09:44 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.389 seconds (JVM running for 1331.474)
2018/12/29-09:45 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13968 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-09:45 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-09:45 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-09:45 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-09:45 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.89 seconds (JVM running for 1370.817)
2018/12/29-09:47 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13968 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-09:47 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-09:47 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-09:47 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-09:47 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 2.64 seconds (JVM running for 1500.928)
2018/12/29-09:50 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13968 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-09:50 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-09:50 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-09:50 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-09:50 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.229 seconds (JVM running for 1667.548)
2018/12/29-10:03 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2708 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-10:03 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-10:03 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-10:03 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-10:03 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 8.883 seconds (JVM running for 11.461)
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:16 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2708 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-10:16 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-10:16 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-10:16 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-10:16 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.399 seconds (JVM running for 813.939)
2018/12/29-10:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:21 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:21 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:21 [http-nio-12080-exec-2] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:21 [http-nio-12080-exec-2] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:21 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:21 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:21 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:21 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:21 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:21 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:21 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:22 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:22 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:22 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:22 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:22 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:22 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:22 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:22 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:22 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:22 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:22 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:22 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:22 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:22 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:24 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:24 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:24 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:24 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:25 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:25 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:25 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:25 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:25 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:25 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:26 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:26 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:26 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:26 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:26 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:26 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:26 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:26 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:26 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:26 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2018/12/29-10:26 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2018/12/29-10:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-10:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-10:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-10:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:28 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:29 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:31 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:31 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:31 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:32 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:32 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:33 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:33 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:33 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:33 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:35 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:35 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:35 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:38 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:38 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:38 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:38 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:39 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:39 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:40 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:40 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:44 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:44 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:45 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:45 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:46 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:46 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:46 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:46 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:48 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:48 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:49 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:49 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:53 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:53 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:54 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:54 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:54 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:54 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:55 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:55 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:55 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:56 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:56 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:57 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:57 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/29-10:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/29-10:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/29-10:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/29-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/29-10:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:57 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/29-10:57 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:57 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:58 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:58 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-10:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:59 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:59 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-10:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-10:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-10:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-10:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-10:59 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-10:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-10:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-10:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-10:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-10:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-10:59 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-10:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-10:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-10:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:00 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:02 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:02 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-11:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:16 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:16 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/29-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/29-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/29-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/29-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/29-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-11:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2018/12/29-11:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/29-11:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2018/12/29-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2018/12/29-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2018/12/29-11:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2018/12/29-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 4(Long)
2018/12/29-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,author,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 4(Long), 0(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/29-11:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/29-11:21 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2018/12/29-11:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 9(Long)
2018/12/29-11:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2018/12/29-11:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:22 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:34 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:38 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:38 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:40 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:40 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:41 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:41 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:41 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:41 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:44 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:44 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:44 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:44 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-11:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:44 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:45 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:45 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:47 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:47 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:47 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:47 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:47 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:47 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:47 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:47 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:47 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:47 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:47 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:47 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:47 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:51 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:51 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:52 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:52 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:52 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:52 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:53 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:53 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:53 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:53 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:53 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:53 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:53 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:53 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:54 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:54 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:54 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:54 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:54 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:54 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-11:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-11:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-11:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-11:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-11:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-11:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-11:54 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-11:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:54 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-11:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-11:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:11 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:11 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:13 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:13 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:13 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:15 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:15 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:24 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:25 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:25 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-13:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:25 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:26 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:26 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-13:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:26 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:31 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:31 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:31 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-13:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:31 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:31 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:32 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:32 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:32 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:32 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:32 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:32 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:36 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:36 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:37 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:37 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:51 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:51 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-13:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-13:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-13:53 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:53 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:53 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:53 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-13:53 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-13:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-13:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-13:53 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-13:53 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-13:54 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2708 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-13:54 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-13:54 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-13:54 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
2018/12/29-13:54 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@37a1a07: startup date [Sat Dec 29 13:54:30 GMT+08:00 2018]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2018/12/29-13:54 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2018/12/29-13:56 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2708 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-13:56 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-13:56 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-13:56 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-13:56 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.399 seconds (JVM running for 14005.593)
2018/12/29-13:58 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2708 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-13:58 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-13:58 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-13:59 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-13:59 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.857 seconds (JVM running for 14141.593)
2018/12/29-14:01 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2708 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-14:01 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-14:01 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-14:01 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-14:01 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.262 seconds (JVM running for 14281.226)
2018/12/29-14:06 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7940 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-14:06 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-14:06 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-14:06 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-14:06 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.243 seconds (JVM running for 13.509)
2018/12/29-14:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:07 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-14:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:10 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-14:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:10 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:10 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-14:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:10 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/29-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/29-14:11 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 12(Long)
2018/12/29-14:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:11 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 12(Long)
2018/12/29-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2018/12/29-14:11 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:11 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:11 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:11 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:11 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:12 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:12 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-14:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:12 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:12 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:12 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:16 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7940 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-14:16 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-14:16 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-14:16 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-14:16 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.304 seconds (JVM running for 611.639)
2018/12/29-14:23 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1104 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-14:23 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-14:23 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-14:23 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-14:23 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 13.051 seconds (JVM running for 16.344)
2018/12/29-14:24 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14592 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-14:24 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-14:24 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-14:24 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-14:24 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.076 seconds (JVM running for 19.235)
2018/12/29-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- ==>  Preparing: select comment_id, comment_content, article_id, create_time, user_id from comment WHERE ( article_id = ? ) 
2018/12/29-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- <==      Total: 2
2018/12/29-14:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-14:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:33 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:33 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-14:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:33 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-14:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:33 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-14:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:33 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:34 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.selectByExample- ==>  Preparing: select comment_id, comment_content, article_id, create_time, user_id from comment WHERE ( article_id = ? ) 
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.selectByExample- <==      Total: 2
2018/12/29-14:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-14:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:36 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:36 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:36 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:36 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:36 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:36 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- ==>  Preparing: select comment_id, comment_content, article_id, create_time, user_id from comment WHERE ( article_id = ? ) 
2018/12/29-14:36 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:36 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:36 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- <==      Total: 2
2018/12/29-14:36 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-14:36 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:36 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:37 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:37 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- ==>  Preparing: select comment_id, comment_content, article_id, create_time, user_id from comment WHERE ( article_id = ? ) 
2018/12/29-14:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.selectByExample- <==      Total: 2
2018/12/29-14:37 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-14:37 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-14:37 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-14:37 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-14:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-14:37 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-14:37 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.selectByExample- ==>  Preparing: select comment_id, comment_content, article_id, create_time, user_id from comment WHERE ( article_id = ? ) 
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-14:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.selectByExample- <==      Total: 2
2018/12/29-14:37 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-14:40 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14592 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-14:40 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-14:40 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-14:40 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-14:40 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.822 seconds (JVM running for 962.337)
2018/12/29-14:59 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7100 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-14:59 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-14:59 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-14:59 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-15:00 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.419 seconds (JVM running for 11.631)
2018/12/29-15:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:00 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-15:01 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:01 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:01 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:01 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-15:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-15:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-15:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:01 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:01 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:01 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:02 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:02 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:02 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:02 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7100 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-15:10 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-15:10 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'articleService': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.lis_dao.ArticleDao' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@javax.annotation.Resource(shareable=true, lookup=, name=, description=, authenticationType=CONTAINER, type=class java.lang.Object, mappedName=)}
2018/12/29-15:10 [restartedMain] ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter- 

***************************
APPLICATION FAILED TO START
***************************

Description:

A component required a bean of type 'org.lis_dao.ArticleDao' that could not be found.


Action:

Consider defining a bean of type 'org.lis_dao.ArticleDao' in your configuration.

2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7100 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-15:10 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.108 seconds (JVM running for 633.017)
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14908 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-15:10 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-15:10 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-15:11 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.685 seconds (JVM running for 19.597)
2018/12/29-15:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-15:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-15:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-15:11 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- ------------------------------------
2018/12/29-15:12 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11072 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2018/12/29-15:12 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2018/12/29-15:12 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2018/12/29-15:12 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2018/12/29-15:12 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 13.692 seconds (JVM running for 16.222)
2018/12/29-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:19 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:19 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:19 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:19 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:19 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:19 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:21 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:21 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:23 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:23 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:23 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:23 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:23 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:23 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:23 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:24 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-15:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-15:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-15:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-15:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-15:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:24 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:24 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-15:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-15:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-15:29 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:29 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:29 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:31 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:31 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:31 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:31 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:31 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:32 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:32 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:32 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:32 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:32 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:32 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:32 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-15:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-15:34 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-15:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-15:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-15:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:34 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:35 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:35 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:35 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:35 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:35 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:51 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-15:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-15:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-15:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-15:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-15:51 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:51 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:51 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:52 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:52 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:52 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:52 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:52 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:54 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:54 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:54 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:54 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:54 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:54 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:54 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:54 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:54 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:54 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:54 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:54 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:54 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:55 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:55 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:55 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:55 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:55 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:56 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:56 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:56 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:56 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:56 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:56 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:59 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:59 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:59 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:59 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-15:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-15:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-15:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-15:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-15:59 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-15:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-15:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-15:59 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-15:59 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-15:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-15:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-15:59 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-15:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-15:59 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:00 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:00 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:00 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:00 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:00 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:00 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:01 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:03 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:03 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:03 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:03 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:03 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:05 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:06 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:12 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:12 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:12 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:12 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:12 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:12 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:18 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:18 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:19 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:25 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:25 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:25 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:25 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:25 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:25 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:25 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:25 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:26 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:26 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:26 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:26 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:26 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:26 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:26 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:26 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:26 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:26 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:26 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:28 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:28 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:28 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:28 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:28 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:28 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:28 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:29 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:29 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:29 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:29 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:29 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:29 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:33 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:33 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:33 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:33 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:33 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:33 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:33 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:33 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:33 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:33 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:34 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:37 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:38 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:38 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:38 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:38 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:38 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:38 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:38 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:38 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:38 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:39 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:39 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:39 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:39 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:39 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:39 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:39 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:55 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:55 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:55 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:55 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:55 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:55 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2018/12/29-16:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:56 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-16:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-16:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-16:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-16:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2018/12/29-16:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2018/12/29-16:56 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-16:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2018/12/29-16:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:56 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-16:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-16:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2018/12/29-16:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-16:56 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-16:56 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-16:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2018/12/29-16:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2018/12/29-16:56 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:56 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:56 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-16:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-16:56 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2018/12/29-16:56 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-16:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-16:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-16:58 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-16:58 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-16:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-16:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-16:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-16:58 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-17:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-17:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-17:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-17:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-17:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-17:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2018/12/29-17:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2018/12/29-17:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-17:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-17:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-17:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-17:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-17:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-17:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-17:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-17:21 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-17:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-17:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-17:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-17:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-17:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2018/12/29-17:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2018/12/29-17:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2018/12/29-17:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2018/12/29-17:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-17:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-17:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-17:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-17:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2018/12/29-17:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2018/12/29-17:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2018/12/29-17:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2018/12/29-17:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2018/12/29-17:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-17:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-17:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-17:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-17:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-17:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-17:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-17:23 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-17:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-17:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-17:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-17:23 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-17:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-17:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-17:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-17:23 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-17:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-17:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-17:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-17:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2018/12/29-17:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2018/12/29-17:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2018/12/29-17:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:24 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2018/12/29-17:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2018/12/29-17:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2018/12/29-17:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2018/12/29-17:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2018/12/29-17:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2018/12/29-17:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2018/12/29-17:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2018/12/29-17:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2018/12/29-17:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2018/12/29-17:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2018/12/29-17:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2018/12/29-17:24 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:03 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1876 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:03 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:03 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:03 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:03 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.139 seconds (JVM running for 13.114)
2019/01/02-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:03 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:03 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:03 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:03 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-10:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/02-10:03 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-10:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/02-10:03 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:03 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2019/01/02-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 9(Long)
2019/01/02-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 9(Long)
2019/01/02-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 9(Long)
2019/01/02-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:21 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:25 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:25 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:25 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:25 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:25 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:25 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:25 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:25 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:25 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:25 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:25 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:25 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:25 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:25 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:25 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:25 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:28 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1876 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:28 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:28 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:28 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:28 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.229 seconds (JVM running for 1542.128)
2019/01/02-10:29 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1876 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:29 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:29 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:29 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:29 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.579 seconds (JVM running for 1608.973)
2019/01/02-10:30 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1876 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:30 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:30 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:30 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:30 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.656 seconds (JVM running for 1667.4)
2019/01/02-10:32 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1876 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:32 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:32 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:32 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:32 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.298 seconds (JVM running for 1784.319)
2019/01/02-10:37 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 15236 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:37 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:37 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:37 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:37 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 13.345 seconds (JVM running for 16.081)
2019/01/02-10:38 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-10:38 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), cxy(String), 1(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/02-10:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:38 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:38 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 15236 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:38 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:38 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:38 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:38 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.967 seconds (JVM running for 106.383)
2019/01/02-10:39 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12728 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-10:39 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-10:39 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-10:39 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-10:39 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.854 seconds (JVM running for 19.909)
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:40 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:40 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:40 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:40 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-10:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:40 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-10:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:40 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:41 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-10:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:41 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:41 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:41 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:41 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:41 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:41 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:41 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:41 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:41 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:41 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:41 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:41 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 9(Long)
2019/01/02-10:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:41 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:41 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:42 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:42 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 10(Long)
2019/01/02-10:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:42 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 12(Long)
2019/01/02-10:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:42 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:42 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 11(Long)
2019/01/02-10:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:43 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:43 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:43 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 11(Long)
2019/01/02-10:43 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:43 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 11(Long)
2019/01/02-10:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:43 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:43 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:43 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 11(Long)
2019/01/02-10:43 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:43 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:46 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:46 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 1(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:46 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:46 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:46 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:46 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 2(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:46 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:46 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:46 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:46 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:48 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:48 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:48 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:48 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:48 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 3(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:48 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:48 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: -1(Long)
2019/01/02-10:48 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 0
2019/01/02-10:48 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:48 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:48 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:48 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:48 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:48 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:48 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:48 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:48 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:48 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: -1(Long)
2019/01/02-10:48 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:48 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:48 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: -1(Long)
2019/01/02-10:48 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:48 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: -1(Long)
2019/01/02-10:48 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:48 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:48 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:48 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:49 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 4(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:49 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:49 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:49 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 5(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:49 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:49 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:49 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 9(Long)
2019/01/02-10:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题5(String), 测试概要5(String), cxy(String), 1(Long), 2018-12-28 11:58:16.0(Timestamp), 2018-12-28 11:58:19.0(Timestamp), # 测试内容5(String), 9(Long)
2019/01/02-10:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:49 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 9(Long)
2019/01/02-10:49 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 9(Long)
2019/01/02-10:49 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 9(Long)
2019/01/02-10:49 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:49 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: -1(Long)
2019/01/02-10:49 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:49 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:50 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 6(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:50 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 0
2019/01/02-10:50 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:50 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:50 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:50 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:50 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 7(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:50 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 0
2019/01/02-10:50 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-10:50 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:50 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: -1(Long)
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:50 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:50 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), cxy(String), 2(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:50 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-10:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-10:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-10:50 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:50 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:50 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 8(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-10:50 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-10:50 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-10:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-10:50 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-10:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:51 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-10:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-10:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-10:51 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:58 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-10:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:58 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-10:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-10:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-10:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-10:58 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-10:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-10:58 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:00 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:00 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:00 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:00 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 9(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:00 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:00 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:00 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:00 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:01 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:01 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 10(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:01 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:01 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:01 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:03 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:03 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:03 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 11(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:03 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:03 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:03 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:03 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 12(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:04 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 13(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:05 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 14(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:06 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 15(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 16(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:06 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:07 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:07 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 17(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:07 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:07 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:07 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:07 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 18(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:07 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:07 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:07 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:07 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 19(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:07 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:07 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:07 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 20(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 21(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 22(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 23(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:11 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:11 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:11 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 24(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:11 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:11 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:11 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:11 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:11 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 25(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:16 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:16 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:16 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:16 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:16 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:16 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 26(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:16 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:16 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:16 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:16 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-11:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:16 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-11:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2019/01/02-11:16 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:19 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:19 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 27(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:19 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:19 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:19 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), cxy(String), 3(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-11:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 28(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 29(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:26 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:26 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:26 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:26 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:26 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:26 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 30(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:26 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:26 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:26 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:26 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:26 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:26 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:26 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:26 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:26 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 31(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 32(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:28 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:28 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:31 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:31 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 33(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:31 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:31 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:31 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:32 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:32 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 34(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:32 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:32 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:32 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:32 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:32 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 35(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:32 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:32 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:32 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 36(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 37(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:34 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 38(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:34 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:35 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:35 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 39(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:35 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:35 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 40(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:35 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:35 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:35 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:35 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:35 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:35 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 41(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:35 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:35 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:36 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:36 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 42(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:36 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:36 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:36 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:36 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:36 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:36 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 43(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:36 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:36 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:36 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:36 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-11:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-11:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-11:41 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-11:41 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-11:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-11:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-11:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-11:41 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-11:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:41 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 44(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-11:41 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-11:41 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-11:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-11:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-11:41 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-11:41 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-11:41 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-11:41 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-11:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-11:41 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-11:50 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12728 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-11:50 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-11:50 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-11:50 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-11:50 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.095 seconds (JVM running for 4269.334)
2019/01/02-11:51 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12728 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-11:51 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-11:51 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-11:51 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-11:51 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.158 seconds (JVM running for 4348.211)
2019/01/02-11:56 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7832 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-11:56 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-11:56 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-11:56 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-11:56 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.354 seconds (JVM running for 14.644)
2019/01/02-11:57 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7832 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-11:57 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-11:57 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-11:57 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-11:57 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.615 seconds (JVM running for 61.168)
2019/01/02-11:58 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5448 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-11:58 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-11:58 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-11:58 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-11:58 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.612 seconds (JVM running for 15.517)
2019/01/02-11:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-11:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-11:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-11:59 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-11:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-11:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 3(Long)
2019/01/02-11:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-11:59 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-11:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-11:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 9(Long), 3(Long)
2019/01/02-11:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-11:59 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-11:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-11:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 3(Long)
2019/01/02-11:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-11:59 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-11:59 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/02-12:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-12:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-12:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-12:00 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-12:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-12:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-12:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-12:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-12:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-12:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-12:00 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 45(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-13:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 46(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:05 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 47(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-13:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-13:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-13:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-13:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-13:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-13:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-13:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-13:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-13:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-13:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-13:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-13:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:07 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 48(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:07 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:07 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:07 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:07 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-13:18 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5448 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:18 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:18 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:18 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
2019/01/02-13:18 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@60f88367: startup date [Wed Jan 02 13:18:53 GMT+08:00 2019]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2019/01/02-13:18 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2019/01/02-13:24 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:24 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:24 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:24 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:24 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.729 seconds (JVM running for 15.109)
2019/01/02-13:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-13:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-13:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-13:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 49(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-13:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-13:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:24 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-13:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:32 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:32 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:32 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:32 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
2019/01/02-13:32 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@52555b0: startup date [Wed Jan 02 13:32:26 GMT+08:00 2019]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2019/01/02-13:32 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2019/01/02-13:33 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:33 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:33 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:33 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:33 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.579 seconds (JVM running for 580.846)
2019/01/02-13:34 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:34 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:34 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:34 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:34 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.246 seconds (JVM running for 649.117)
2019/01/02-13:38 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:38 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:38 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:38 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:38 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.785 seconds (JVM running for 853.049)
2019/01/02-13:39 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:39 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:39 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:39 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:39 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.441 seconds (JVM running for 908.138)
2019/01/02-13:40 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:40 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:40 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:40 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:40 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.559 seconds (JVM running for 969.217)
2019/01/02-13:41 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:41 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:41 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:42 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:42 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.734 seconds (JVM running for 1081.68)
2019/01/02-13:43 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:43 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:43 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:43 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:43 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.399 seconds (JVM running for 1172.978)
2019/01/02-13:45 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1700 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:45 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:45 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:45 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:45 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.951 seconds (JVM running for 1297.564)
2019/01/02-13:49 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7352 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:49 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:49 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:49 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:49 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.863 seconds (JVM running for 13.792)
2019/01/02-13:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-13:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-13:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-13:50 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-13:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-13:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 3(Long), 8(Long)
2019/01/02-13:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/02-13:51 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id ) values ( ?, ? ) 
2019/01/02-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 8(Long), 8(Long)
2019/01/02-13:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-13:51 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-13:52 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13388 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:52 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:52 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:52 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:52 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10264 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-13:52 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-13:52 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-13:52 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-13:52 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 16.251 seconds (JVM running for 20.433)
2019/01/02-13:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-13:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-13:53 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-13:53 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-13:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-13:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 3(Long), 8(Long), 2019-01-02 13:53:08.8(Timestamp)
2019/01/02-13:53 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-13:53 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 3(Long), 8(Long)
2019/01/02-13:53 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/02-13:53 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-13:53 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:57 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-13:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-13:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-13:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-13:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-13:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-13:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-13:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 50(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-13:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-13:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:57 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:57 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:57 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'boolean'; nested exception is java.lang.IllegalArgumentException: Invalid boolean value [undefined]
2019/01/02-13:57 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'boolean'; nested exception is java.lang.IllegalArgumentException: Invalid boolean value [undefined]
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:59 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-13:59 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 51(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:59 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:59 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-13:59 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-13:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-13:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-13:59 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-13:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-13:59 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-13:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-13:59 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 52(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-13:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-13:59 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-13:59 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-13:59 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-13:59 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-13:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-13:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-13:59 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-13:59 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:00 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:00 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:00 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:00 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:00 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 53(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:00 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:00 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:00 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:00 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:00 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:00 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:00 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:01 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 54(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:01 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:01 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:02 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:02 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 55(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:02 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:02 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:03 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:03 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 56(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:03 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:03 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:03 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-14:03 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-14:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-14:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 57(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:04 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 58(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 59(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:07 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:07 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:07 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:07 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 60(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:07 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:07 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:07 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:07 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 61(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:08:09.091(Timestamp)
2019/01/02-14:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-14:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 62(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/02-14:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:09:08.319(Timestamp)
2019/01/02-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:09:13.654(Timestamp)
2019/01/02-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 63(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 8(Long)
2019/01/02-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 2
2019/01/02-14:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:09:54.869(Timestamp)
2019/01/02-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:11 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:11 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:11 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 64(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:11 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:11 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:11 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:11 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:11 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-14:11 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 8(Long)
2019/01/02-14:11 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/02-14:11 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:11:26.749(Timestamp)
2019/01/02-14:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:11 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:12 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:12 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 65(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:12 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:12 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:12 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/02-14:12 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:12:22.264(Timestamp)
2019/01/02-14:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:12 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 8(Long)
2019/01/02-14:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/02-14:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:12:34.056(Timestamp)
2019/01/02-14:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:39 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8548 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-14:39 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-14:39 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-14:39 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-14:39 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.172 seconds (JVM running for 16.321)
2019/01/02-14:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:39 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:39 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 66(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:39 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:39 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-14:39 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-14:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:39 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:39 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 67(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:39 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:39 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:39 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:40 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:40 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:40 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 68(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:40 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:40 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:40 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-14:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/02-14:40 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-14:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/02-14:40 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-14:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/02-14:40 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-14:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/02-14:40 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-14:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-14:40 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-14:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-14:40 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-14:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-14:40 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/02-14:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-14:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-14:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:40 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:42 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2968 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-14:42 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-14:42 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-14:42 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-14:42 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.323 seconds (JVM running for 11.487)
2019/01/02-14:43 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:43 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:43 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:43 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:43 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:43 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:43 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:43 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:43 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:43 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:43 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:43 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 69(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:43 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:43 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:43 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:43 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:43 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:43 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:43 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:43 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:45 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:45 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 70(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:45 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:45 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:45 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:45 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:46 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:46 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:46 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:46 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:46 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 71(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:46 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:46 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:46 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:46 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:46 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:52 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:52 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:52 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 72(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:52 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:52 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:52 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-14:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-14:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-14:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-14:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-14:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-14:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-14:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-14:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-14:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-14:58 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-14:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-14:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-14:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 73(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-14:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-14:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-14:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-14:58 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-14:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-14:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-14:58 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 2
2019/01/02-14:58 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/02-14:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 8(Long)
2019/01/02-14:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/02-14:58 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/02-14:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 8(Long), 2019-01-02 14:58:50.384(Timestamp)
2019/01/02-14:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/02-14:58 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/02-14:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.insertSelective- ==>  Preparing: insert into comment ( comment_content, article_id, create_time, user_id ) values ( ?, ?, ?, ? ) 
2019/01/02-14:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.insertSelective- ==> Parameters: 不错哦(String), 8(Long), 2019-01-02 14:59:00.669(Timestamp), 7(Long)
2019/01/02-14:59 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.insertSelective- <==    Updates: 1
2019/01/02-14:59 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加评论------------------------------------
2019/01/02-14:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-14:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-14:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 3
2019/01/02-14:59 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-15:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-15:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-15:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-15:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-15:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-15:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-15:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-15:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-15:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-15:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-15:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 74(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-15:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-15:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-15:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-15:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-15:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-15:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 3
2019/01/02-15:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-15:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-15:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-15:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.insertSelective- ==>  Preparing: insert into comment ( comment_content, article_id, create_time, user_id ) values ( ?, ?, ?, ? ) 
2019/01/02-15:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.insertSelective- ==> Parameters: 还可以啊(String), 8(Long), 2019-01-02 15:09:32.339(Timestamp), 7(Long)
2019/01/02-15:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.insertSelective- <==    Updates: 1
2019/01/02-15:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加评论------------------------------------
2019/01/02-15:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-15:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-15:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-15:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-15:13 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8184 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-15:13 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-15:13 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-15:13 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-15:13 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.62 seconds (JVM running for 11.753)
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-15:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-15:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 75(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-15:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-15:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-15:14 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-15:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-15:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-15:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-15:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 3
2019/01/02-15:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==>  Preparing: SELECT count(*) FROM article 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- ==> Parameters: 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample_COUNT- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article limit ?,? 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByExample- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-15:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-15:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-15:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 11(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 11(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题7(String), 测试概要7(String), cxy (String), 1(Long), 2018-12-28 11:58:25.0(Timestamp), 2018-12-28 11:58:38.0(Timestamp), # 测试内容7(String), 11(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-15:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 11(Long), 7(Long)
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 11(Long)
2019/01/02-15:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-15:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 11(Long)
2019/01/02-15:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-15:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 11(Long)
2019/01/02-15:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-15:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-15:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-15:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 76(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-15:14 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-15:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-15:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-15:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-15:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-15:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-15:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-15:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-15:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-15:15 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-15:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:15 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-15:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, author, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-15:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-15:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, author = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-15:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-15:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), cxy(String), 77(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-15:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-15:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-15:15 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-15:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-15:15 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-15:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-15:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-15:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-15:15 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-15:15 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-15:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-15:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-15:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-15:15 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-15:19 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 8184 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-15:19 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-15:19 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-15:19 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-15:19 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.53 seconds (JVM running for 363.56)
2019/01/02-20:15 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 448 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-20:15 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-20:15 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-20:15 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-20:16 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 16.31 seconds (JVM running for 20.433)
2019/01/02-20:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:17 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as creatTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-20:17 [http-nio-12080-exec-2] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'org.lis_dao.ArticleDao.selectAllArticleResultList'.  It's likely that neither a Result Type nor a Result Map was specified.] with root cause
org.apache.ibatis.executor.ExecutorException: A query was run and no Result Maps were found for the Mapped Statement 'org.lis_dao.ArticleDao.selectAllArticleResultList'.  It's likely that neither a Result Type nor a Result Map was specified.
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.validateResultMapsCount(DefaultResultSetHandler.java:283)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:189)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:64)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:49)
	at com.github.pagehelper.SqlUtil.doProcessPage(SqlUtil.java:499)
	at com.github.pagehelper.SqlUtil._processPage(SqlUtil.java:408)
	at com.github.pagehelper.SqlUtil.processPage(SqlUtil.java:375)
	at com.github.pagehelper.PageHelper.intercept(PageHelper.java:252)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy96.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy79.selectAllArticleResultList(Unknown Source)
	at org.hzqisheng.service.Impl.ArticleServiceImpl.getArticleList(ArticleServiceImpl.java:40)
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/01/02-20:17 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-20:17 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-20:18 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11456 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-20:18 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-20:18 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-20:19 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-20:19 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.923 seconds (JVM running for 15.639)
2019/01/02-20:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as creatTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:19 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-20:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-20:19 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as creatTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-20:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-20:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as creatTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-20:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-20:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 78(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-20:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-20:19 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-20:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-20:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-20:19 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-20:19 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-20:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-20:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-20:19 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-20:19 [http-nio-12080-exec-2] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-20:19 [http-nio-12080-exec-2] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 79(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-20:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-20:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-20:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-20:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-20:20 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 11(Long)
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 11(Long)
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题7(String), 测试概要7(String), 1(Long), 2(Long), 2018-12-28 11:58:25.0(Timestamp), 2018-12-28 11:58:38.0(Timestamp), # 测试内容7(String), 11(Long)
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-20:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-20:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 11(Long)
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-20:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 11(Long)
2019/01/02-20:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 11(Long)
2019/01/02-20:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-20:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 80(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-20:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-20:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-20:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-20:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-20:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-20:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:21 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12012 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-20:21 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-20:21 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-20:21 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-20:21 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.776 seconds (JVM running for 12.596)
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:21 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-20:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-20:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 81(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-20:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-20:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-20:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-20:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-20:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-20:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 82(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-20:21 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-20:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-20:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-20:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-20:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-20:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-20:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-20:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-20:24 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-20:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-20:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-20:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 83(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-20:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-20:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-20:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-20:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-20:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-20:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-20:24 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-20:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-20:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-20:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-20:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-20:24 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-20:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-20:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-20:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-20:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-20:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-20:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-20:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-20:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-20:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-20:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-20:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12012 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-20:51 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.009 seconds (JVM running for 1838.159)
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12012 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-20:51 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-20:51 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.977 seconds (JVM running for 1849.679)
2019/01/02-20:52 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12012 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-20:52 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-20:52 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-20:52 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
2019/01/02-20:52 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@15b76dc7: startup date [Wed Jan 02 20:52:35 CST 2019]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2019/01/02-20:52 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/ArticleService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2019/01/02-20:59 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3172 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-20:59 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-20:59 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-20:59 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-20:59 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.054 seconds (JVM running for 17.654)
2019/01/02-21:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:00 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:00 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:00 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:00 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=?} 
2019/01/02-21:00 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:00 [http-nio-12080-exec-3] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '}' at line 3
### The error may exist in org/lis_dao/ArticleDao.xml
### The error may involve org.lis_dao.ArticleDao.selectByArticleResultByArticleId-Inline
### The error occurred while setting parameters
### SQL: select admin_name as adminName,admin_pic as adminPic       from article inner join admin on article.admin_id = admin.admin_id       where article.article_id=?}
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '}' at line 3
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '}' at line 3] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '}' at line 3
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:943)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3973)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2490)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy98.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:49)
	at com.github.pagehelper.SqlUtil._processPage(SqlUtil.java:402)
	at com.github.pagehelper.SqlUtil.processPage(SqlUtil.java:375)
	at com.github.pagehelper.PageHelper.intercept(PageHelper.java:252)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy96.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:82)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy79.selectByArticleResultByArticleId(Unknown Source)
	at org.hzqisheng.service.Impl.ArticleServiceImpl.findArticleResultByArticle(ArticleServiceImpl.java:55)
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/01/02-21:00 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-21:00 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-21:01 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 440 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:01 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:01 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:01 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:01 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 17.077 seconds (JVM running for 19.902)
2019/01/02-21:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:02 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11856 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:02 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:02 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:02 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:02 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.914 seconds (JVM running for 14.712)
2019/01/02-21:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:02 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:02 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:02 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:04 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5792 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:04 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:04 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:04 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:04 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.289 seconds (JVM running for 16.038)
2019/01/02-21:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:04 [http-nio-12080-exec-3] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ClassCastException: org.lis_entity.ReplayResult cannot be cast to org.lis_entity.ArticleResult] with root cause
java.lang.ClassCastException: org.lis_entity.ReplayResult cannot be cast to org.lis_entity.ArticleResult
	at com.sun.proxy.$Proxy79.selectByArticleResultByArticleId(Unknown Source)
	at org.hzqisheng.service.Impl.ArticleServiceImpl.findArticleResultByArticle(ArticleServiceImpl.java:55)
	at org.hzqisheng.controller.ArticleController.articleList(ArticleController.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/01/02-21:04 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-21:04 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-21:07 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10268 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:07 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:07 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:08 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:08 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.665 seconds (JVM running for 14.961)
2019/01/02-21:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 结果org.lis_entity.ArticleResult@34688477
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 结果org.lis_entity.ArticleResult@1d1104e6
2019/01/02-21:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:08 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10268 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:08 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:08 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:08 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:08 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.157 seconds (JVM running for 55.53)
2019/01/02-21:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 结果cxy
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 结果cxy
2019/01/02-21:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:09 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11856 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:09 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:09 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:09 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:09 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.142 seconds (JVM running for 15.058)
2019/01/02-21:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 3(Long)
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 3(Long), 0(Integer), 3(Integer)
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 84(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:10 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:10 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:10 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 85(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:10 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:10 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:10 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:12 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:12 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 86(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:13 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:13 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:13 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:13 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:13 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:13 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 4(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-21:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-21:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 87(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:14 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 88(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:15 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:15 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:15 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:15 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:15 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:15 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 89(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:15 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:15 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:15 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:15 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/02-21:15 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:16 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:16 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 90(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:16 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:16 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:16 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:16 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:16 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:16 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:16 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11856 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:18 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.405 seconds (JVM running for 520.084)
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12252 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-21:18 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-21:18 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.561 seconds (JVM running for 15.154)
2019/01/02-21:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:18 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:18 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:18 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:18 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:18 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:18 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 91(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:18 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:18 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:18 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:18 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:18 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:18 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:18 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:18 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 92(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:28 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:28 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 93(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:28 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:28 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:28 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:28 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 94(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:28 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:28 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:28 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-21:28 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:28 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:28 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:28 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:28 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:29 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:29 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:29 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 95(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:29 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:29 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:29 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:29 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:29 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:31 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:31 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:31 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:31 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 96(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:31 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:31 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:31 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 5(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:31 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/02-21:31 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:31 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:31 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:31 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 97(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:31 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:31 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:31 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:33 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:33 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:33 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:33 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 98(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:33 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:33 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:33 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:33 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:33 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:33 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-21:33 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-21:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:33 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:33 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 99(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:34 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:34 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:34 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:34 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 100(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:34 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:34 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:34 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:39 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:39 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:39 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:39 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 101(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:39 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:39 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:39 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:39 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:39 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:39 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 102(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:44 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-21:44 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 103(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:44 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 104(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:44 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-21:44 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:44 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:44 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/02-21:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:44 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:45 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:45 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 105(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:45 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:45 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/02-21:45 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:45 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:45 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:45 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:45 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:45 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:45 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:45 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 106(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:45 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:45 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:45 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:45 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:45 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:45 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:50 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:50 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:50 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 107(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:50 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:50 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:50 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:50 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 108(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:50 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:50 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:51 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-21:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-21:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-21:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-21:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-21:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-21:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-21:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-21:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-21:51 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-21:51 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-21:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-21:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 109(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-21:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-21:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-21:51 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-21:51 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-21:51 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-21:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-21:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-21:51 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-21:51 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-22:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-22:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-22:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-22:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-22:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-22:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-22:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-22:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-22:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-22:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-22:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-22:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-22:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 110(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-22:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-22:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-22:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-22:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-22:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-22:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 111(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-22:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-22:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-22:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-22:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-22:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-22:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ReplayDao.insertSelective- ==>  Preparing: insert into replay ( reply_content, user_id, comment_id, create_time, replied_name ) values ( ?, ?, ?, ?, ? ) 
2019/01/02-22:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ReplayDao.insertSelective- ==> Parameters: 不错哦(String), 7(Long), 3(Long), 2019-01-02 22:05:45.846(Timestamp), cxf11(String)
2019/01/02-22:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ReplayDao.insertSelective- <==    Updates: 1
2019/01/02-22:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加回复------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:10 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7388 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/02-22:10 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/02-22:10 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/02-22:10 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/02-22:10 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.11 seconds (JVM running for 13.98)
2019/01/02-22:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-22:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-22:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-22:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-22:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-22:10 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-22:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-22:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-22:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-22:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-22:10 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-22:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 112(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-22:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-22:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-22:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-22:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-22:10 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-22:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-22:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-22:10 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-22:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-22:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 1
2019/01/02-22:10 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ReplayDao.insertSelective- ==>  Preparing: insert into replay ( reply_content, user_id, comment_id, create_time, replied_name ) values ( ?, ?, ?, ?, ? ) 
2019/01/02-22:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ReplayDao.insertSelective- ==> Parameters: 还可以哦(String), 7(Long), 3(Long), 2019-01-02 22:11:06.956(Timestamp), 冰残绝恋(String)
2019/01/02-22:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.ReplayDao.insertSelective- <==    Updates: 1
2019/01/02-22:11 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加回复------------------------------------
2019/01/02-22:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:11 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-22:11 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:11 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-22:11 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-22:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-22:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-22:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-22:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-22:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-22:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-22:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-22:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-22:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-22:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-22:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 113(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-22:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-22:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-22:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-22:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-22:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-22:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-22:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-22:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-22:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-22:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-22:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-22:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-22:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-22:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/02-22:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ReplayDao.insertSelective- ==>  Preparing: insert into replay ( reply_content, user_id, comment_id, create_time, replied_name ) values ( ?, ?, ?, ?, ? ) 
2019/01/02-22:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ReplayDao.insertSelective- ==> Parameters: 可以哦(String), 7(Long), 3(Long), 2019-01-02 22:21:19.35(Timestamp), 冰残绝恋(String)
2019/01/02-22:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.ReplayDao.insertSelective- <==    Updates: 1
2019/01/02-22:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加回复------------------------------------
2019/01/02-22:21 [http-nio-12080-exec-3] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.bind.MissingServletRequestParameterException: Required Long parameter 'commentId' is not present
2019/01/02-22:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/02-22:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/02-22:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-22:22 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-22:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-22:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-22:22 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/02-22:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/02-22:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/02-22:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 114(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/02-22:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/02-22:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/02-22:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/02-22:22 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/02-22:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/02-22:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/02-22:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/02-22:22 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/02-22:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/02-22:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/02-22:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 3
2019/01/02-22:22 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- ==>  Preparing: insert into replay ( reply_content, user_id, comment_id, create_time, replied_name ) values ( ?, ?, ?, ?, ? ) 
2019/01/02-22:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- ==> Parameters: 不错哦(String), 7(Long), 3(Long), 2019-01-02 22:22:53.475(Timestamp), 冰残绝恋(String)
2019/01/02-22:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- <==    Updates: 1
2019/01/02-22:22 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加回复------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/02-22:22 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/02-22:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/02-22:22 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/02-22:22 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/02-22:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/02-22:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/02-22:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/02-22:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/02-22:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/02-22:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/02-22:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/02-22:23 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/02-22:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/02-22:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/02-22:23 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:07 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12836 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/03-09:07 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/03-09:07 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/03-09:08 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/03-09:08 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 15.586 seconds (JVM running for 20.536)
2019/01/03-09:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 115(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/03-09:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/03-09:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/03-09:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/03-09:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:25 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 9048 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/03-09:25 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/03-09:25 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/03-09:26 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/03-09:26 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.11 seconds (JVM running for 13.042)
2019/01/03-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:43 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:43 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:43 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:43 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:44 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:45 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:45 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:45 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:45 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:46 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:46 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:46 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:46 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:46 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:46 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:52 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:52 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:52 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2019/01/03-09:52 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "NaN"
2019/01/03-09:52 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "NaN"
2019/01/03-09:52 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "undefined"
2019/01/03-09:52 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "NaN"
2019/01/03-09:52 [http-nio-12080-exec-8] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "NaN"
2019/01/03-09:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:54 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:54 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:54 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:54 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:54 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:54 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:54 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:54 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:55 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:55 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:55 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 6(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:55 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:55 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:55 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:55 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 116(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/03-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:55 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/03-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/03-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/03-09:55 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:55 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:56 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 7(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:56 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:56 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:56 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:56 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 8(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:56 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:56 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:56 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:56 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:56 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 9(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:56 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:56 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:56 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:56 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 10(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:57 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 117(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:57 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/03-09:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 11(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:57 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/03-09:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 12(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:57 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.insertSelective- ==>  Preparing: insert into collection ( user_id, article_id, create_time ) values ( ?, ?, ? ) 
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.insertSelective- ==> Parameters: 7(Long), 7(Long), 2019-01-03 09:57:38.462(Timestamp)
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.insertSelective- <==    Updates: 1
2019/01/03-09:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:57 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:57 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:57 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 118(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:57 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:57 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/03-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/03-09:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:57 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 2
2019/01/03-09:57 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 13(Long), 2018-12-24 17:25:58.0(Timestamp), 2018-12-24 17:25:58.0(Timestamp), 以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:58 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/03-09:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/03-09:58 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==>  Preparing: delete from collection WHERE ( user_id = ? and article_id = ? ) 
2019/01/03-09:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.deleteByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.deleteByExample- <==    Updates: 1
2019/01/03-09:58 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户取消或者增加收藏------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:58 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:58 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/03-09:58 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/03-09:58 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/03-09:58 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:58 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 119(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/03-09:58 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/03-09:58 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/03-09:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-5] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/03-09:58 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/03-09:58 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/03-09:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/03-09:58 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/03-09:58 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/03-09:58 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/03-09:58 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-10:02 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-10:02 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-10:02 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-10:02 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-10:02 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.618 seconds (JVM running for 14.641)
2019/01/04-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-10:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-10:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-10:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-10:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-10:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-10:03 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-10:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-10:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-10:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 120(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/04-10:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-10:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/04-10:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/04-10:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/04-10:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/04-10:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/04-10:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/04-10:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-10:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-10:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:01 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 121(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/04-11:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-11:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/04-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/04-11:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/04-11:01 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/04-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/04-11:01 [http-nio-12080-exec-5] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/04-11:01 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:01 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/04-11:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:01 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:01 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:03 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:03 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:03 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:03 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:03 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:03 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:10 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:10 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-11:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-11:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 122(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/04-11:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/04-11:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/04-11:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-11:10 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/04-11:10 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-11:10 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/04-11:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-11:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:10 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/04-11:10 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-11:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-11:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-11:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/04-11:10 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/04-11:10 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-11:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:11 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:11 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:11 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:11 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:11 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:11 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:11 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:11 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:12 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:12 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:13 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/04-11:16 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:16 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:16 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:16 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-11:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-11:16 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-11:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:17 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:17 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:17 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:17 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/04-11:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:17 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:19 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:19 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/04-11:19 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:19 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 11(Long)
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 11(Long)
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题7(String), 测试概要7(String), 1(Long), 3(Long), 2018-12-28 11:58:25.0(Timestamp), 2018-12-28 11:58:38.0(Timestamp), # 测试内容7(String), 11(Long)
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-11:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 11(Long)
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 0
2019/01/04-11:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 11(Long)
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 11(Long)
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/04-11:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/04-11:20 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 123(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/04-11:20 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 124(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-11:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 125(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/04-11:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-11:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/04-11:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/04-11:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/04-11:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-11:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-11:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-11:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:00 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:00 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:00 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:00 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
2019/01/04-15:00 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@77dc6665: startup date [Fri Jan 04 15:00:48 GMT+08:00 2019]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2019/01/04-15:00 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2019/01/04-15:01 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:01 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:01 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:01 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-15:01 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.208 seconds (JVM running for 17957.21)
2019/01/04-15:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:02 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:02 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:02 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/04-15:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:02 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/04-15:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/04-15:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:02 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:02 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:02 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-15:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-15:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-15:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-15:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-15:03 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-15:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-15:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-15:04 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:04 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:04 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:04 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
2019/01/04-15:04 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1adbccc3: startup date [Fri Jan 04 15:04:14 GMT+08:00 2019]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2019/01/04-15:04 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2019/01/04-15:09 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:09 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:09 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:09 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-15:09 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.716 seconds (JVM running for 18431.681)
2019/01/04-15:10 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:10 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:10 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.949 seconds (JVM running for 18543.639)
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3452 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:11 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.046 seconds (JVM running for 18565.977)
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13744 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:11 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:11 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-15:19 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 9640 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-15:19 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-15:19 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-15:19 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-15:20 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-15:20 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 19.191 seconds (JVM running for 24.873)
2019/01/04-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:20 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:20 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:20 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:20 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:29 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:29 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:29 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:29 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:29 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:29 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:30 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:30 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:30 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:30 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:30 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:30 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:30 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:30 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:30 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:30 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:33 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:33 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:38 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:38 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:38 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:38 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:38 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:38 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:38 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:38 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:39 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:39 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:39 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:39 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:39 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:39 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:39 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:39 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:40 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:41 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:43 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:43 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:43 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:43 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:43 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:43 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:46 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:46 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:46 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:46 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:48 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:48 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:48 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:48 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:49 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:50 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:51 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:51 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:52 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:52 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:52 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:52 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:52 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:52 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:52 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:52 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-15:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-15:56 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-15:56 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-15:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-15:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-15:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-15:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-15:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-15:56 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-15:56 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-15:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-15:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-15:56 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-15:56 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-16:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-16:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-16:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-16:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-16:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 9640 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:07 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:07 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.021 seconds (JVM running for 2841.434)
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 9640 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:07 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:07 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.74 seconds (JVM running for 2848.455)
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 1708 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:07 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:07 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:07 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 14.691 seconds (JVM running for 19.668)
2019/01/04-16:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:10 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:13 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2276 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:13 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:13 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:13 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:13 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:13 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.742 seconds (JVM running for 13.813)
2019/01/04-16:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:16 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:16 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.insertSelective- ==>  Preparing: insert into sign ( user_id, sign_time ) values ( ?, ? ) 
2019/01/04-16:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.insertSelective- ==> Parameters: 7(Long), 2019-01-04 16:16:47.496(Timestamp)
2019/01/04-16:16 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.insertSelective- <==    Updates: 1
2019/01/04-16:16 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户签到------------------------------------
2019/01/04-16:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:19 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:19 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.insertSelective- ==>  Preparing: insert into sign ( user_id, sign_time ) values ( ?, ? ) 
2019/01/04-16:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.insertSelective- ==> Parameters: 7(Long), 2019-01-04 16:19:48.835(Timestamp)
2019/01/04-16:19 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.insertSelective- <==    Updates: 1
2019/01/04-16:19 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户签到------------------------------------
2019/01/04-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.insertSelective- ==>  Preparing: insert into sign ( user_id, sign_time ) values ( ?, ? ) 
2019/01/04-16:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.insertSelective- ==> Parameters: 7(Long), 2019-01-04 16:20:07.342(Timestamp)
2019/01/04-16:20 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.insertSelective- <==    Updates: 1
2019/01/04-16:20 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户签到------------------------------------
2019/01/04-16:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:20 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:20 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.insertSelective- ==>  Preparing: insert into sign ( user_id, sign_time ) values ( ?, ? ) 
2019/01/04-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.insertSelective- ==> Parameters: 7(Long), 2019-01-04 16:20:22.48(Timestamp)
2019/01/04-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.insertSelective- <==    Updates: 1
2019/01/04-16:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户签到------------------------------------
2019/01/04-16:23 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2276 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:23 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:23 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:23 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:23 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:23 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.303 seconds (JVM running for 598.072)
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2276 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:24 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:24 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.554 seconds (JVM running for 623.953)
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2276 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:24 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:24 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 8.919 seconds (JVM running for 646.05)
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2276 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:24 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:24 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:24 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.327 seconds (JVM running for 670.593)
2019/01/04-16:25 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2276 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:25 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:25 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:25 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:25 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:25 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.996 seconds (JVM running for 693.827)
2019/01/04-16:26 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:26 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:26 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:26 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:26 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:26 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.471 seconds (JVM running for 14.675)
2019/01/04-16:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-16:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-16:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-16:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-16:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-16:28 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-16:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-16:28 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-16:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-16:28 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-16:28 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-16:29 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/04-16:29 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/04-16:30 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:30 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:30 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:30 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:30 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-16:30 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-16:30 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-16:30 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-16:30 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:30 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:30 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:30 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:31 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:31 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-16:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-16:31 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-16:31 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-16:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.insertSelective- ==>  Preparing: insert into sign ( user_id, sign_time ) values ( ?, ? ) 
2019/01/04-16:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.insertSelective- ==> Parameters: 7(Long), 2019-01-04 16:31:05.139(Timestamp)
2019/01/04-16:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.insertSelective- <==    Updates: 1
2019/01/04-16:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户签到------------------------------------
2019/01/04-16:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:31 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-16:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-16:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-16:31 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-16:32 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:32 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:32 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:32 [restartedMain] WARN  org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext- Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
2019/01/04-16:32 [restartedMain] ERROR org.springframework.beans.factory.support.DefaultListableBeanFactory- Destroy method on bean with name 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory' threw an exception
java.lang.IllegalStateException: ApplicationEventMulticaster not initialized - call 'refresh' before multicasting events via the context: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@733e2177: startup date [Fri Jan 04 16:32:29 GMT+08:00 2019]; root of context hierarchy
	at org.springframework.context.support.AbstractApplicationContext.getApplicationEventMulticaster(AbstractApplicationContext.java:414) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.ApplicationListenerDetector.postProcessBeforeDestruction(ApplicationListenerDetector.java:97) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:253) ~[spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968) [spring-beans-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1030) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:556) [spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
2019/01/04-16:32 [restartedMain] ERROR org.springframework.boot.SpringApplication- Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.hzqisheng.Application]; nested exception is java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:181) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:308) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:228) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:270) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:93) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:687) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:525) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.hzqisheng.Application.main(Application.java:17) [classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_144]
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.RELEASE.jar:1.5.4.RELEASE]
Caused by: java.io.FileNotFoundException: class path resource [org/hzqisheng/service/UserService.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.createMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:89) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactory.getMetadataReader(ConcurrentReferenceCachingMetadataReaderFactory.java:76) ~[spring-boot-1.5.4.RELEASE.jar:1.5.4.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:693) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getInterfaces(ConfigurationClassParser.java:870) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processInterfaces(ConfigurationClassParser.java:363) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:320) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:190) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:292) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:245) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:198) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:167) ~[spring-context-4.3.9.RELEASE.jar:4.3.9.RELEASE]
	... 18 common frames omitted
2019/01/04-16:33 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:33 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:33 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:33 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:33 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:33 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.424 seconds (JVM running for 466.511)
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:35 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:35 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.124 seconds (JVM running for 545.162)
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:35 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:35 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:35 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.368 seconds (JVM running for 593.919)
2019/01/04-16:39 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:39 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:39 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:39 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:39 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:39 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.359 seconds (JVM running for 823.815)
2019/01/04-16:42 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:42 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:42 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:42 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:42 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:42 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 3.318 seconds (JVM running for 1008.723)
2019/01/04-16:44 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:44 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:44 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:44 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:44 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:44 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.828 seconds (JVM running for 1108.235)
2019/01/04-16:46 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 2488 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:46 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:46 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:46 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:46 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:46 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.513 seconds (JVM running for 1215.508)
2019/01/04-16:47 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 4880 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:47 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:47 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:47 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:47 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:47 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.227 seconds (JVM running for 14.123)
2019/01/04-16:48 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10864 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:48 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:48 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:48 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:48 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:48 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.434 seconds (JVM running for 11.692)
2019/01/04-16:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:51 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:51 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-16:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-16:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-16:51 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-16:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-16:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.327(Timestamp)
2019/01/04-16:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 5
2019/01/04-16:51 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-16:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:52 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:52 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-16:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-16:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-16:52 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-16:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-16:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.15(Timestamp)
2019/01/04-16:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 5
2019/01/04-16:52 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-16:54 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10864 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:54 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:54 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:54 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:54 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:54 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 5.624 seconds (JVM running for 373.31)
2019/01/04-16:54 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10864 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:54 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:54 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:55 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:55 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:55 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 8.463 seconds (JVM running for 389.856)
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10864 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:57 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:57 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 6.454 seconds (JVM running for 545.664)
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10864 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:57 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:57 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:57 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 7.28 seconds (JVM running for 560.826)
2019/01/04-16:58 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 7456 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-16:58 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-16:58 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-16:58 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-16:58 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-16:58 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.539 seconds (JVM running for 13.456)
2019/01/04-16:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-16:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-16:59 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-16:59 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-16:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-16:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-16:59 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-16:59 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-16:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-16:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.401(Timestamp)
2019/01/04-16:59 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-16:59 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:00 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5836 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/04-17:00 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/04-17:00 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/04-17:00 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/04-17:00 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/04-17:00 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.277 seconds (JVM running for 14.674)
2019/01/04-17:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-17:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-17:01 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-17:01 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-17:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:01 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:01 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.789(Timestamp)
2019/01/04-17:01 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:01 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-17:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-17:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-17:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-17:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-17:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-17:01 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-17:01 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-17:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:01 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:01 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.254(Timestamp)
2019/01/04-17:01 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:01 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/04-17:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-17:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-17:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-17:03 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-17:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-17:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-17:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-17:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-17:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.979(Timestamp)
2019/01/04-17:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:03 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-17:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-17:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 126(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/04-17:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/04-17:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/04-17:08 [http-nio-12080-exec-5] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-17:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-17:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/04-17:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.312(Timestamp)
2019/01/04-17:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-17:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-17:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-17:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-17:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/04-17:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-17:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/04-17:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/04-17:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/04-17:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/04-17:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.033(Timestamp)
2019/01/04-17:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.416(Timestamp)
2019/01/04-17:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-17:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-17:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-17:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/04-17:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/04-17:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/04-17:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.383(Timestamp)
2019/01/04-17:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.275(Timestamp)
2019/01/04-17:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:13 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/04-17:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/04-17:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/04-17:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/04-17:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/04-17:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/04-17:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-04 00:00:00.0(Timestamp), 2019-01-04 23:59:59.507(Timestamp)
2019/01/04-17:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/04-17:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/06-10:24 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 11520 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/06-10:24 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/06-10:24 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/06-10:24 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/06-10:24 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 16.056 seconds (JVM running for 21.037)
2019/01/07-09:02 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 4756 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/07-09:02 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/07-09:02 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/07-09:02 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/07-09:02 [restartedMain] WARN  org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer- Unable to start LiveReload server
2019/01/07-09:02 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 16.854 seconds (JVM running for 21.503)
2019/01/08-09:57 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 15328 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/08-09:57 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/08-09:57 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/08-09:57 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/08-09:58 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 12.772 seconds (JVM running for 16.511)
2019/01/08-10:29 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 10576 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/08-10:29 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/08-10:29 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/08-10:29 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/08-10:29 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.711 seconds (JVM running for 13.444)
2019/01/08-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-10:57 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-10:57 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-10:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-10:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.048(Timestamp)
2019/01/08-10:57 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 0
2019/01/08-10:57 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.insertSelective- ==>  Preparing: insert into sign ( user_id, sign_time ) values ( ?, ? ) 
2019/01/08-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.insertSelective- ==> Parameters: 7(Long), 2019-01-08 11:02:20.015(Timestamp)
2019/01/08-11:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.insertSelective- <==    Updates: 1
2019/01/08-11:02 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户签到------------------------------------
2019/01/08-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/08-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/08-11:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/08-11:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/08-11:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/08-11:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/08-11:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/08-11:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/08-11:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/08-11:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/08-11:02 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/08-11:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-11:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.903(Timestamp)
2019/01/08-11:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-11:02 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-11:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-11:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-11:02 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-11:02 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-11:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-11:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-11:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-11:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-11:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-11:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-11:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-11:03 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.797(Timestamp)
2019/01/08-11:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-11:03 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-11:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-11:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-11:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-11:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-13:12 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 6216 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/08-13:12 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/08-13:12 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/08-13:12 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/08-13:12 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.678 seconds (JVM running for 13.458)
2019/01/08-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-13:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-13:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-13:12 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "{"keys":["userAccount","userPwd","userId","avatarUrl"],"currentSize":1,"limitSize":10240}"
2019/01/08-13:12 [http-nio-12080-exec-4] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "{"keys":["userAccount","userPwd","userId","avatarUrl"],"currentSize":1,"limitSize":10240}"
2019/01/08-13:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:12 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:12 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.896(Timestamp)
2019/01/08-13:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:12 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.27(Timestamp)
2019/01/08-13:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:14 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.465(Timestamp)
2019/01/08-13:14 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/08-13:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/08-13:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/08-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/08-13:14 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:14 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.521(Timestamp)
2019/01/08-13:14 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.085(Timestamp)
2019/01/08-13:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:15 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:15 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.573(Timestamp)
2019/01/08-13:15 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:15 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:15 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:15 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:15 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:15 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.37(Timestamp)
2019/01/08-13:15 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:15 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:15 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:15 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:28 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 6972 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/08-13:28 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/08-13:28 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/08-13:28 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/08-13:28 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.599 seconds (JVM running for 14.287)
2019/01/08-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-13:32 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-13:32 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:32 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:32 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.384(Timestamp)
2019/01/08-13:32 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:32 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:32 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:32 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/08-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 2
2019/01/08-13:32 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/08-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:32 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:32 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.902(Timestamp)
2019/01/08-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:32 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:32 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/08-13:32 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/08-13:32 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/08-13:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-13:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-13:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-13:41 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-13:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:41 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:41 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.577(Timestamp)
2019/01/08-13:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:41 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:41 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:41 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/08-13:41 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/08-13:41 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/08-13:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.972(Timestamp)
2019/01/08-13:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/08-13:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/08-13:42 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/08-13:42 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 3
2019/01/08-13:42 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:42 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.727(Timestamp)
2019/01/08-13:42 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:42 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/08-13:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/08-13:42 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/08-13:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/08-13:42 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/08-13:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/08-13:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/08-13:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-08 00:00:00.0(Timestamp), 2019-01-08 23:59:59.497(Timestamp)
2019/01/08-13:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/08-13:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/08-13:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/08-13:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/08-13:42 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/08-16:38 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 13020 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/08-16:38 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/08-16:38 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/08-16:38 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/08-16:38 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 22.289 seconds (JVM running for 29.261)
2019/01/09-09:02 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 4088 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-09:02 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-09:02 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-09:02 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-09:02 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.665 seconds (JVM running for 16.132)
2019/01/09-09:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.044(Timestamp)
2019/01/09-09:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 0
2019/01/09-09:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/09-09:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/09-09:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.299(Timestamp)
2019/01/09-09:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 0
2019/01/09-09:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.insertSelective- ==>  Preparing: insert into sign ( user_id, sign_time ) values ( ?, ? ) 
2019/01/09-09:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.insertSelective- ==> Parameters: 7(Long), 2019-01-09 09:04:43.142(Timestamp)
2019/01/09-09:04 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.insertSelective- <==    Updates: 1
2019/01/09-09:04 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户签到------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/09-09:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/09-09:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.167(Timestamp)
2019/01/09-09:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.477(Timestamp)
2019/01/09-09:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/09-09:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/09-09:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==>  Preparing: select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId from collection inner join user on collection.user_id = user.user_id inner join article on collection.article_id = article.article_id where user.user_id = ? 
2019/01/09-09:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/09-09:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- ==> Parameters: 7(Long)
2019/01/09-09:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectAllCollectionResultByUserId- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取用户收藏列表------------------------------------
2019/01/09-09:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.463(Timestamp)
2019/01/09-09:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.75(Timestamp)
2019/01/09-09:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.5(Timestamp)
2019/01/09-09:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:12 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:12 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.119(Timestamp)
2019/01/09-09:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:12 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:12 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:17 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:17 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:17 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:17 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.421(Timestamp)
2019/01/09-09:17 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:17 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:17 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:17 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:26 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:26 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:28 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.349(Timestamp)
2019/01/09-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:28 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:28 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:28 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:28 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-09:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:29 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:29 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.18(Timestamp)
2019/01/09-09:29 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:29 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:29 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:29 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:29 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:29 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:35 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:35 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.207(Timestamp)
2019/01/09-09:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:35 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:35 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:37 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:37 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:37 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:37 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.485(Timestamp)
2019/01/09-09:37 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:37 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:37 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:37 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.25(Timestamp)
2019/01/09-09:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.063(Timestamp)
2019/01/09-09:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-09:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-09:40 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-09:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 3
2019/01/09-09:40 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.157(Timestamp)
2019/01/09-09:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:40 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:40 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.565(Timestamp)
2019/01/09-09:40 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:40 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:40 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.575(Timestamp)
2019/01/09-09:40 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:40 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:40 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.489(Timestamp)
2019/01/09-09:40 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:40 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:40 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:41 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:41 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.03(Timestamp)
2019/01/09-09:41 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:41 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:41 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:41 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-09:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-09:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-09:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-09:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-09:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:50 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-09:50 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-09:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-09:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.868(Timestamp)
2019/01/09-09:50 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-09:50 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-09:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-09:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-09:50 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-09:50 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-09:55 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-09:55 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-09:55 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-09:55 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-09:55 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-09:55 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-09:55 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 14(Long), 2018-12-24 17:25:58.0(Timestamp), 2019-01-06 11:01:53.0(Timestamp), # 总结
以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/09-09:55 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-09:55 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/09-09:55 [http-nio-12080-exec-10] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/09-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/09-09:55 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/09-09:55 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-09:55 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/09-09:55 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-09:55 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-09:55 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-09:55 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-09:55 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-09:57 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-09:57 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-09:57 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-09:57 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-10:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-10:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-10:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-10:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-10:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-10:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-10:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-10:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-10:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-10:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.239(Timestamp)
2019/01/09-10:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-10:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-10:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-10:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-10:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-10:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.573(Timestamp)
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-10:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-10:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-10:12 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-10:12 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-10:12 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-10:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-10:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:12 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-10:12 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-10:12 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-10:12 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/09-10:12 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-10:12 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-10:12 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/09-10:12 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-10:12 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/09-10:12 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 2
2019/01/09-10:12 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 1(Long)
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 1(Long), 0(Integer), 3(Integer)
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 2
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 8(Long)
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/09-10:12 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/09-10:12 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==>  Preparing: SELECT count(*) FROM article_category INNER JOIN article ON article_category.article__id = article.article_id INNER JOIN category ON article_category.category_id = category.category_id WHERE article_category.category_id = ? 
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- ==> Parameters: 2(Long)
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId_COUNT- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==>  Preparing: select article.article_id as articleId,title,expect,read_count as readCount,article.create_time as createTime from article_category inner join article on article_category.article__id = article.article_id inner join category on article_category.category_id = category.category_id where article_category.category_id = ? limit ?,? 
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- ==> Parameters: 2(Long), 0(Integer), 3(Integer)
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectArticleListByCategoryId- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id where article.article_id=? 
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- ==> Parameters: 7(Long)
2019/01/09-10:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByArticleResultByArticleId- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-10:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-10:13 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/09-10:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-10:13 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-10:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-10:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-10:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 6(Integer), 3(Integer)
2019/01/09-10:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 2
2019/01/09-10:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-10:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-10:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-10:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-10:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-10:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-10:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-10:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.147(Timestamp)
2019/01/09-10:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-10:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-10:13 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-10:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-10:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-10:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-10:21 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:00 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 4088 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-11:00 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-11:00 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-11:00 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-11:00 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 4.218 seconds (JVM running for 7123.208)
2019/01/09-11:05 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 3240 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-11:05 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-11:05 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-11:05 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-11:05 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.651 seconds (JVM running for 14.379)
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.758(Timestamp)
2019/01/09-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:06 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-11:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-11:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-11:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-11:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-11:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/09-11:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-11:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.62(Timestamp)
2019/01/09-11:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:06 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:06 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-11:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-11:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 127(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-11:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/09-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/09-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/09-11:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/09-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/09-11:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/09-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/09-11:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/09-11:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/09-11:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/09-11:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/09-11:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/09-11:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/09-11:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/09-11:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 4(Long)
2019/01/09-11:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/09-11:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 5(Long)
2019/01/09-11:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 0
2019/01/09-11:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-11:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-11:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-11:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-11:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.479(Timestamp)
2019/01/09-11:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-11:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-11:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.027(Timestamp)
2019/01/09-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.656(Timestamp)
2019/01/09-11:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.385(Timestamp)
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:21 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:21 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:21 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:21 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.403(Timestamp)
2019/01/09-11:21 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:21 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:22 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.084(Timestamp)
2019/01/09-11:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:22 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:22 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:22 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:23 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:23 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:23 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.321(Timestamp)
2019/01/09-11:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:23 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:23 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.1(Timestamp)
2019/01/09-11:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:23 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:24 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.325(Timestamp)
2019/01/09-11:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:35 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:35 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.361(Timestamp)
2019/01/09-11:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:35 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:42 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:42 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:42 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:42 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.455(Timestamp)
2019/01/09-11:42 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:42 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:42 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:42 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:44 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:44 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:44 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:44 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.28(Timestamp)
2019/01/09-11:44 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:44 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:44 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:44 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:49 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:49 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:49 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:49 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.606(Timestamp)
2019/01/09-11:49 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:49 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:49 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:49 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:50 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:50 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:50 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:50 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.444(Timestamp)
2019/01/09-11:50 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:50 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:50 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:50 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:51 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:51 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:51 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:51 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.35(Timestamp)
2019/01/09-11:51 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:51 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:51 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:51 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-11:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-11:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-11:52 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-11:52 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-11:52 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-11:52 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.761(Timestamp)
2019/01/09-11:52 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-11:52 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-11:52 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-11:52 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:22 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:22 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:22 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:22 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.311(Timestamp)
2019/01/09-13:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:22 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy1234(String)
2019/01/09-13:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==>  Preparing: update user SET account = ? where user_id = ? 
2019/01/09-13:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==> Parameters: cxy1234(String), 7(Long)
2019/01/09-13:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-13:23 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户修改账号------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.188(Timestamp)
2019/01/09-13:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy1234(String)
2019/01/09-13:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.656(Timestamp)
2019/01/09-13:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.189(Timestamp)
2019/01/09-13:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:31 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy1234(String)
2019/01/09-13:31 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:31 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:31 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:31 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.423(Timestamp)
2019/01/09-13:31 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:31 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:31 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:31 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 1234(String)
2019/01/09-13:32 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==>  Preparing: update user SET account = ? where user_id = ? 
2019/01/09-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==> Parameters: cxy123(String), 7(Long)
2019/01/09-13:32 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-13:32 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户修改账号------------------------------------
2019/01/09-13:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:33 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:33 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:33 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:33 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.454(Timestamp)
2019/01/09-13:33 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:33 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:33 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:33 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-13:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 冰残绝恋(String)
2019/01/09-13:33 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:34 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:34 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:34 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:34 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.359(Timestamp)
2019/01/09-13:34 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:34 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:34 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:34 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-13:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: undefined(String)
2019/01/09-13:34 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:34 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户修改用户名------------------------------------
2019/01/09-13:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:35 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:35 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:35 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:35 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.7(Timestamp)
2019/01/09-13:35 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:35 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:35 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:35 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-13:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 冰残绝恋1(String)
2019/01/09-13:35 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:35 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户修改用户名------------------------------------
2019/01/09-13:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:35 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:35 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.81(Timestamp)
2019/01/09-13:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:35 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:35 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:36 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:36 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:36 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:36 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.965(Timestamp)
2019/01/09-13:36 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:36 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:36 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:36 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-13:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 冰残绝恋1(String)
2019/01/09-13:36 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:36 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户修改用户名------------------------------------
2019/01/09-13:37 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14824 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-13:37 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-13:37 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-13:37 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-13:37 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 9.67 seconds (JVM running for 11.708)
2019/01/09-13:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:38 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:38 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.66(Timestamp)
2019/01/09-13:38 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:38 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:38 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:38 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-13:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 冰残绝恋1(String)
2019/01/09-13:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==>  Preparing: update user SET username = ? where user_id = ? 
2019/01/09-13:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==> Parameters: 冰残绝恋1(String), 7(Long)
2019/01/09-13:38 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-13:38 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户修改用户名------------------------------------
2019/01/09-13:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:38 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:38 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.929(Timestamp)
2019/01/09-13:38 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:38 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:38 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:38 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-13:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 冰残绝恋(String)
2019/01/09-13:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-13:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==>  Preparing: update user SET username = ? where user_id = ? 
2019/01/09-13:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==> Parameters: 冰残绝恋(String), 7(Long)
2019/01/09-13:38 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-13:38 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户修改用户名------------------------------------
2019/01/09-13:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:44 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:44 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:44 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:44 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.29(Timestamp)
2019/01/09-13:44 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:44 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:44 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:44 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-13:47 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-13:47 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-13:47 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-13:47 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-13:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-13:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-13:47 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-13:47 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-13:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-13:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.817(Timestamp)
2019/01/09-13:47 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-13:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-13:47 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-13:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-13:47 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-13:47 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-14:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-14:06 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-14:06 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-14:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.8(Timestamp)
2019/01/09-14:06 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:06 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==>  Preparing: update user where user_id = ? 
2019/01/09-14:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==> Parameters: 7(Long)
2019/01/09-14:06 [http-nio-12080-exec-7] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'where user_id = 7' at line 3
### The error may involve org.lis_dao.UserDao.updateByPrimaryKeySelective-Inline
### The error occurred while setting parameters
### SQL: update user            where user_id = ?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'where user_id = 7' at line 3
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'where user_id = 7' at line 3] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'where user_id = 7' at line 3
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:943)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3973)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2490)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:493)
	at sun.reflect.GeneratedMethodAccessor69.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy98.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy96.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy76.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy84.updateByPrimaryKeySelective(Unknown Source)
	at org.hzqisheng.service.Impl.UserServiceImpl.updateUser(UserServiceImpl.java:131)
	at org.hzqisheng.controller.UserController.updateUserPassword(UserController.java:288)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019/01/09-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-14:07 [http-nio-12080-exec-8] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-14:07 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-14:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:07 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:07 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.653(Timestamp)
2019/01/09-14:07 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:07 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:07 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:07 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==>  Preparing: update user SET `password` = ? where user_id = ? 
2019/01/09-14:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==> Parameters: 123456(String), 7(Long)
2019/01/09-14:07 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-14:07 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户修改密码------------------------------------
2019/01/09-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-14:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-14:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.974(Timestamp)
2019/01/09-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==>  Preparing: update user SET `password` = ? where user_id = ? 
2019/01/09-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- ==> Parameters: 1234567(String), 7(Long)
2019/01/09-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-14:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户修改密码------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.388(Timestamp)
2019/01/09-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-14:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.116(Timestamp)
2019/01/09-14:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-14:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-14:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-14:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-14:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.261(Timestamp)
2019/01/09-14:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:09 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-14:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-14:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-14:10 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-14:10 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-14:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-14:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-14:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:24 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:24 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-14:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.844(Timestamp)
2019/01/09-14:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:24 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:24 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-14:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-14:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 3
2019/01/09-14:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-14:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-14:24 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-14:24 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-14:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.532(Timestamp)
2019/01/09-14:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-14:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-14:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-14:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-14:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-14:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-15:34 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 14368 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-15:34 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-15:34 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-15:34 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-15:35 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 14.722 seconds (JVM running for 18.71)
2019/01/09-15:43 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5244 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-15:43 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-15:43 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-15:43 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-15:43 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.702 seconds (JVM running for 13.935)
2019/01/09-15:54 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 12328 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-15:54 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-15:54 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-15:54 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-15:54 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 11.988 seconds (JVM running for 16.41)
2019/01/09-16:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:02 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:02 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:02 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 15(Long), 2018-12-24 17:25:58.0(Timestamp), 2019-01-06 11:01:53.0(Timestamp), # 总结
以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/09-16:02 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:02 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/09-16:02 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/09-16:02 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-9] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:02 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:02 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/09-16:02 [http-nio-12080-exec-6] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:02 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:02 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:02 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-7] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-6] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.PageNotFound- Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-1] WARN  org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver- Resolved exception caused by Handler execution: org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
2019/01/09-16:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:02 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:02 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:02 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:03 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:03 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:03 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:03 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-3] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:03 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:03 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 16(Long), 2018-12-24 17:25:58.0(Timestamp), 2019-01-06 11:01:53.0(Timestamp), # 总结
以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/09-16:03 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:03 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/09-16:03 [http-nio-12080-exec-2] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/09-16:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/09-16:03 [http-nio-12080-exec-9] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:03 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/09-16:03 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/09-16:03 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:04 [http-nio-12080-exec-10] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:04 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:04 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:04 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 17(Long), 2018-12-24 17:25:58.0(Timestamp), 2019-01-06 11:01:53.0(Timestamp), # 总结
以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/09-16:04 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:04 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/09-16:04 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:04 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/09-16:04 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:04 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/09-16:04 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/09-16:04 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:05 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 18(Long), 2018-12-24 17:25:58.0(Timestamp), 2019-01-06 11:01:53.0(Timestamp), # 总结
以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/09-16:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:05 [http-nio-12080-exec-10] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/09-16:05 [http-nio-12080-exec-7] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:05 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:05 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:05 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 128(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/09-16:05 [http-nio-12080-exec-9] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:05 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-6] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:05 [http-nio-12080-exec-1] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:05 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/09-16:05 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/09-16:05 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/09-16:06 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/09-16:06 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 3(Long)
2019/01/09-16:06 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/09-16:06 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/09-16:06 [http-nio-12080-exec-2] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 2
2019/01/09-16:06 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- ==>  Preparing: insert into replay ( reply_content, user_id, comment_id, create_time, replied_name ) values ( ?, ?, ?, ?, ? ) 
2019/01/09-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- ==> Parameters: 不错哦(String), 7(Long), 2(Long), 2019-01-09 16:06:11.756(Timestamp), cxf10(String)
2019/01/09-16:06 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- <==    Updates: 1
2019/01/09-16:06 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加回复------------------------------------
2019/01/09-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/09-16:06 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 3
2019/01/09-16:06 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxf10(String)
2019/01/09-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByPrimaryKeySelective- ==>  Preparing: update news SET user_id = ?, article_id = ?, `status` = ?, news_content = ?, create_time = ? where news_id = ? 
2019/01/09-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByPrimaryKeySelective- ==> Parameters: 3(Long), 8(Long), 0(Integer), 冰残绝恋在<<测试标题4>>中回复了您，请查看!(String), 2019-01-09 16:06:11.841(Timestamp), null
2019/01/09-16:06 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByPrimaryKeySelective- <==    Updates: 0
2019/01/09-16:06 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 发送消息------------------------------------
2019/01/09-16:07 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 9044 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-16:07 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-16:07 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-16:07 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-16:07 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 14.326 seconds (JVM running for 18.404)
2019/01/09-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题2(String), 测试概要2(String), 1(Long), 19(Long), 2018-12-24 17:25:58.0(Timestamp), 2019-01-06 11:01:53.0(Timestamp), # 总结
以生产管理-质量检测-维修为例
```
   <div>
                        <label>维修人：</label>
                        <input ng-model="repairman" ng-focus="personResult=true" ng-blur="personResult=false" type="text" placeholder="搜索并选择.." />
                        <div class="resDiv" ng-if="personResult">
                            <div class="noData" ng-if="person.length<=0">无结果</div>
                            <ul>
                                <li ng-repeat="item in selectDatas | filter:repairman as person" ng-mousedown="choseChecker(item)">{{item}}</li>
                            </ul>
                        </div>
                    </div>
```
```
   //获取所有维修人
        var getAllRepairman=function (){
            $http.get("/repairRecord/repairMan").then(function (data) {
                $scope.selectDatas=data.data;
            }).catch(function (reason) {
                console.log(reason);
            })
        };

        //选择维修人
        $scope.choseChecker = function (item) {
            $scope.repairman = item;
        };
  
```
(String), 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 7(Long), 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 2(Long)
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 4(Long)
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 0
2019/01/09-16:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 3(Integer), 3(Integer)
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:08 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 129(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/09-16:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/09-16:08 [http-nio-12080-exec-7] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-9] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:08 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:08 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/09-16:08 [http-nio-12080-exec-2] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/09-16:08 [http-nio-12080-exec-4] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/09-16:08 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/09-16:08 [http-nio-12080-exec-1] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 3
2019/01/09-16:08 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- ==>  Preparing: insert into replay ( reply_content, user_id, comment_id, create_time, replied_name ) values ( ?, ?, ?, ?, ? ) 
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- ==> Parameters: 还挺好的(String), 7(Long), 2(Long), 2019-01-09 16:08:45.45(Timestamp), cxf10(String)
2019/01/09-16:08 [http-nio-12080-exec-5] DEBUG org.lis_dao.ReplayDao.insertSelective- <==    Updates: 1
2019/01/09-16:08 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加回复------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==>  Preparing: select reply_id as replyId,reply_content as replyContent,username,replay.create_time as createTime,replied_name as repliedName from replay inner join user on replay.user_id = user.user_id inner join comment on replay.comment_id = comment.comment_id where replay.comment_id = ? order by replay.create_time 
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- ==> Parameters: 2(Long)
2019/01/09-16:08 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectReplayListByCommentId- <==      Total: 4
2019/01/09-16:08 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过评论id查找回复------------------------------------
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( username = ? ) 
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxf10(String)
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.insertSelective- ==>  Preparing: insert into news ( user_id, article_id, `status`, news_content, create_time ) values ( ?, ?, ?, ?, ? ) 
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.insertSelective- ==> Parameters: 3(Long), 8(Long), 0(Integer), 冰残绝恋在《测试标题4》中回复了您，请查看!(String), 2019-01-09 16:08:45.529(Timestamp)
2019/01/09-16:08 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.insertSelective- <==    Updates: 1
2019/01/09-16:08 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 发送消息------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==>  Preparing: SELECT count(*) FROM article INNER JOIN admin ON article.admin_id = admin.admin_id 
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- ==> Parameters: 
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList_COUNT- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==>  Preparing: select article.article_id as articleId,title,expect,admin.admin_id as adminId,read_count as readCount,article.create_time as createTime,article.update_time as updateTime,content,admin_name as adminName,admin_pic as adminPic from article inner join admin on article.admin_id = admin.admin_id limit ?,? 
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- ==> Parameters: 0(Integer), 3(Integer)
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleDao.selectAllArticleResultList- <==      Total: 3
2019/01/09-16:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 获取文章列表------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==>  Preparing: select category_id, category_name from category 
2019/01/09-16:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- ==> Parameters: 
2019/01/09-16:09 [http-nio-12080-exec-2] DEBUG org.lis_dao.CategoryDao.selectByExample- <==      Total: 4
2019/01/09-16:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.ArticleController- 用户注册------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:09 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.766(Timestamp)
2019/01/09-16:09 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:09 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxf10(String)
2019/01/09-16:09 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 0
2019/01/09-16:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2019/01/09-16:09 [http-nio-12080-exec-10] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 3(Long)
2019/01/09-16:09 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.949(Timestamp)
2019/01/09-16:09 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 3(Long), 0(Integer)
2019/01/09-16:09 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:09 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:09 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-16:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2019/01/09-16:10 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:10 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 3(Long)
2019/01/09-16:10 [http-nio-12080-exec-1] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:10 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.977(Timestamp)
2019/01/09-16:10 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:10 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 3(Long), 0(Integer)
2019/01/09-16:10 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:10 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:12 [restartedMain] INFO  org.hzqisheng.Application- Starting Application on DESKTOP-2TIOAVO with PID 5900 (E:\Ideaproject\yunlis\lis_api\target\classes started by thlnkpad in E:\Ideaproject\yunlis)
2019/01/09-16:12 [restartedMain] DEBUG org.hzqisheng.Application- Running with Spring Boot v1.5.4.RELEASE, Spring v4.3.9.RELEASE
2019/01/09-16:12 [restartedMain] INFO  org.hzqisheng.Application- The following profiles are active: dev
2019/01/09-16:12 [restartedMain] INFO  org.hzqisheng.config.MybatisAutoConfiguration- 注册MyBatis分页插件PageHelper
2019/01/09-16:12 [restartedMain] INFO  org.hzqisheng.Application- Started Application in 10.353 seconds (JVM running for 12.827)
2019/01/09-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: 123456(String)
2019/01/09-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 3(Long)
2019/01/09-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 3(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.65(Timestamp)
2019/01/09-16:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 0
2019/01/09-16:13 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 3(Long), 0(Integer)
2019/01/09-16:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户退出登录------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:13 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.156(Timestamp)
2019/01/09-16:13 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:13 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:13 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:13 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:13 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 0
2019/01/09-16:13 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:13 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.018(Timestamp)
2019/01/09-16:13 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:13 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:13 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:13 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:13 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:13 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 0
2019/01/09-16:13 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:14 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:14 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.421(Timestamp)
2019/01/09-16:14 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:14 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:14 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:14 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:14 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 1
2019/01/09-16:14 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:14 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:14 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:19 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:19 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:19 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.557(Timestamp)
2019/01/09-16:19 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:19 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:19 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:19 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:19 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:19 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:19 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:19 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:20 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:20 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:20 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:20 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:20 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:20 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.016(Timestamp)
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:20 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:20 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:20 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:20 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:20 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:20 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:21 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:21 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:21 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:21 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:21 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:21 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.171(Timestamp)
2019/01/09-16:21 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:21 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:21 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:21 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:21 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:21 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:21 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:21 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:22 [http-nio-12080-exec-6] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:22 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:22 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:22 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.286(Timestamp)
2019/01/09-16:22 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:22 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:22 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:22 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:22 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:22 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:22 [http-nio-12080-exec-3] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:22 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:23 [http-nio-12080-exec-5] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:23 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:23 [http-nio-12080-exec-4] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:23 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:23 [http-nio-12080-exec-8] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:23 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:23 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:23 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.089(Timestamp)
2019/01/09-16:23 [http-nio-12080-exec-7] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:23 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:23 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:23 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:23 [http-nio-12080-exec-10] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:23 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:23 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:23 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:24 [http-nio-12080-exec-2] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:24 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:24 [http-nio-12080-exec-3] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:24 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:24 [http-nio-12080-exec-5] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:24 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.651(Timestamp)
2019/01/09-16:24 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:24 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:24 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:24 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:24 [http-nio-12080-exec-7] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:24 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:24 [http-nio-12080-exec-6] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:24 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.196(Timestamp)
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==>  Preparing: select user_id, username, avatarUrl, authority, `password`, account from user WHERE ( account = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- ==> Parameters: cxy123(String)
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.UserDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.UserController- 用户登录------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.223(Timestamp)
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 130(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/09-16:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.865(Timestamp)
2019/01/09-16:27 [http-nio-12080-exec-9] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-9] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:27 [http-nio-12080-exec-1] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-1] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==>  Preparing: update news SET `status` = ? WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- ==> Parameters: 1(Integer), 7(Long), 0(Integer)
2019/01/09-16:27 [http-nio-12080-exec-2] DEBUG org.lis_dao.NewsDao.updateByExampleSelective- <==    Updates: 0
2019/01/09-16:27 [http-nio-12080-exec-2] INFO  org.hzqisheng.controller.UserController- 更新消息状态------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.selectByExample- ==>  Preparing: select news_id, user_id, article_id, `status`, news_content, create_time from news WHERE ( user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.selectByExample- ==> Parameters: 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-4] DEBUG org.lis_dao.NewsDao.selectByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 获取消息列表------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==>  Preparing: select article_id, title, expect, admin_id, read_count, create_time, update_time, content from article where article_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==>  Preparing: update article SET title = ?, expect = ?, admin_id = ?, read_count = ?, create_time = ?, update_time = ?, content = ? where article_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- ==> Parameters: 测试标题4(String), 测试概要4(String), 1(Long), 131(Long), 2018-12-24 17:26:13.0(Timestamp), 2018-12-24 17:28:11.0(Timestamp), 
 
![kotlin模块](http://bmob-cdn-20503.b0.upaiyun.com/2018/11/22/a37cfc9040003231805ac8976bf71da6.png)
注：
1. 备料单<->供应链管理.采购管理.备料(done)
2. 询价单<->供应链管理.采购管理.询价(done)
3. 收货管理<->仓库管理.出库管理.发货单？
4. 请款<->
5. 采购单<->供应链管理.采购管理.采购（done)
6. 申购单<->供应链管理.采购管理.申购（后台没完成）


优先编写询价单，请款单工作流可以编写(备料单上一张下一张获取processId)
/partials/flexFlowTest/abondon.html
修改中文词语错误。
(String), 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-3] DEBUG org.lis_dao.ArticleDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.ArticleController- 通过文章id查找文章------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-5] DEBUG org.lis_dao.ArticleDao.updateByPrimaryKeySelective- <==    Updates: 1
2019/01/09-16:27 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.ArticleController- 增加文章的阅读量------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==>  Preparing: select count(*) from collection WHERE ( article_id = ? and user_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- ==> Parameters: 8(Long), 7(Long)
2019/01/09-16:27 [http-nio-12080-exec-6] DEBUG org.lis_dao.CollectionDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-6] INFO  org.hzqisheng.controller.ArticleController- 判断文章是否被用户收藏------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==>  Preparing: select article_category_id, article__id, category_id from article_category WHERE ( article__id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.ArticleCategoryDao.selectByExample- <==      Total: 2
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 3(Long)
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==>  Preparing: select category_id, category_name from category where category_id = ? 
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- ==> Parameters: 1(Long)
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==>  Preparing: select count(*) from comment WHERE ( article_id = ? ) 
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-8] DEBUG org.lis_dao.CategoryDao.selectByPrimaryKey- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-8] INFO  org.hzqisheng.controller.ArticleController- 通过articleId查找相应的标签------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-7] DEBUG org.lis_dao.CommentDao.countByExample- <==      Total: 1
2019/01/09-16:27 [http-nio-12080-exec-7] INFO  org.hzqisheng.controller.ArticleController- 通过文章的id统计其评论数------------------------------------
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==>  Preparing: select comment_id as commentId,comment_content as commentContent,title,comment.create_time as createTime,username,avatarUrl as avatarurl from comment inner join user on comment.user_id = user.user_id inner join article on comment.article_id = article.article_id where comment.article_id = ? order by comment.create_time 
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- ==> Parameters: 8(Long)
2019/01/09-16:27 [http-nio-12080-exec-10] DEBUG org.lis_dao.ArticleDao.selectCommentListByArticleId- <==      Total: 4
2019/01/09-16:27 [http-nio-12080-exec-10] INFO  org.hzqisheng.controller.ArticleController- 通过文章id获取评论列表------------------------------------
2019/01/09-16:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==>  Preparing: select count(*) from sign WHERE ( user_id = ? ) 
2019/01/09-16:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- ==> Parameters: 7(Long)
2019/01/09-16:28 [http-nio-12080-exec-4] DEBUG org.lis_dao.SignDao.countByExample- <==      Total: 1
2019/01/09-16:28 [http-nio-12080-exec-4] INFO  org.hzqisheng.controller.UserController- 统计用户签到次数------------------------------------
2019/01/09-16:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==>  Preparing: select sign_id, user_id, sign_time from sign WHERE ( user_id = ? and sign_time >= ? and sign_time <= ? ) 
2019/01/09-16:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- ==> Parameters: 7(Long), 2019-01-09 00:00:00.0(Timestamp), 2019-01-09 23:59:59.364(Timestamp)
2019/01/09-16:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==>  Preparing: select count(*) from news WHERE ( user_id = ? and `status` = ? ) 
2019/01/09-16:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- ==> Parameters: 7(Long), 0(Integer)
2019/01/09-16:28 [http-nio-12080-exec-5] DEBUG org.lis_dao.NewsDao.countByExample- <==      Total: 1
2019/01/09-16:28 [http-nio-12080-exec-3] DEBUG org.lis_dao.SignDao.selectByExample- <==      Total: 1
2019/01/09-16:28 [http-nio-12080-exec-5] INFO  org.hzqisheng.controller.UserController- 统计用户未读消息数------------------------------------
2019/01/09-16:28 [http-nio-12080-exec-3] INFO  org.hzqisheng.controller.UserController- 判断用户是否能签到(一天只能签到一次)-----------------------------------

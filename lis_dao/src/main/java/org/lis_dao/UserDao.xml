<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.lis_dao.UserDao">
  <resultMap id="BaseResultMap" type="org.lis_entity.User">
    <id column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="avatarUrl" jdbcType="VARCHAR" property="avatarurl" />
    <result column="authority" jdbcType="INTEGER" property="authority" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="account" jdbcType="VARCHAR" property="account" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, username, avatarUrl, authority, `password`, account
  </sql>
  <select id="selectByExample" parameterType="org.lis_entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.lis_entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="user_id" keyProperty="userId" parameterType="org.lis_entity.User" useGeneratedKeys="true">
    insert into user (username, avatarUrl, authority, 
      `password`, account)
    values (#{username,jdbcType=VARCHAR}, #{avatarurl,jdbcType=VARCHAR}, #{authority,jdbcType=INTEGER}, 
      #{password,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="user_id" keyProperty="userId" parameterType="org.lis_entity.User" useGeneratedKeys="true">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="avatarurl != null">
        avatarUrl,
      </if>
      <if test="authority != null">
        authority,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="account != null">
        account,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="avatarurl != null">
        #{avatarurl,jdbcType=VARCHAR},
      </if>
      <if test="authority != null">
        #{authority,jdbcType=INTEGER},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.lis_entity.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.avatarurl != null">
        avatarUrl = #{record.avatarurl,jdbcType=VARCHAR},
      </if>
      <if test="record.authority != null">
        authority = #{record.authority,jdbcType=INTEGER},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set user_id = #{record.userId,jdbcType=BIGINT},
      username = #{record.username,jdbcType=VARCHAR},
      avatarUrl = #{record.avatarurl,jdbcType=VARCHAR},
      authority = #{record.authority,jdbcType=INTEGER},
      `password` = #{record.password,jdbcType=VARCHAR},
      account = #{record.account,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.lis_entity.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="avatarurl != null">
        avatarUrl = #{avatarurl,jdbcType=VARCHAR},
      </if>
      <if test="authority != null">
        authority = #{authority,jdbcType=INTEGER},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.lis_entity.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      avatarUrl = #{avatarurl,jdbcType=VARCHAR},
      authority = #{authority,jdbcType=INTEGER},
      `password` = #{password,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <select id="selectNameAndSign" parameterType="Map" resultType="org.lis_entity.SignResult">
   select username,sign_time as signTime,sign_id as signId
   from  user join sign on user.user_id =sign.user_id
  <where>
   <if test="username!=null and username!=''">
         username like  "%"#{username}"%"
   </if>
    <if test="startTime!=null">
      AND  sign_time &gt;=  #{startTime}
    </if>
    <if test="endTime!=null">
      AND  sign_time  &lt;=  #{endTime}
    </if>
  </where>
  </select>
   <select id="selectByFeedbackCondition" parameterType="Map"  resultType="org.lis_entity.FeedbackResult">
     select  username,feedback_id as feedbackId,feedback_content as feedbackContent,contact,creat_time as creatTime
     from  user join feedback on user.user_id = feedback.user_id
     <where>
       <if test="username!=null and username!=''">
         username like  "%"#{username}"%"
       </if>
     <if test="startTime!=null">
       AND  creat_time &gt;=  #{startTime}
     </if>
     <if test="endTime!=null">
       AND  creat_time  &lt;=  #{endTime}
     </if>
     </where>
   </select>
  <select id="selectByCollectionCondition" parameterType="Map" resultType="org.lis_entity.CollectionResult">
    select username,collection_id as collectionId,title,collection.create_time as createTime
    from collection inner join user on collection.user_id = user.user_id  inner join article on collection.article_id = article.article_id
    <where>
      <if test="username!=null and username!=''">
        username like  "%"#{username}"%"
      </if>
      <if test="title!=null and title!=''">
        AND title like  "%"#{title}"%"
      </if>
      <if test="startTime!=null">
        AND  collection.create_time &gt;=  #{startTime}
      </if>
      <if test="endTime!=null">
        AND  collection.create_time  &lt;=  #{endTime}
      </if>
    </where>
    order by username
</select>

  <select id="selectAllCollectionResultByUserId" parameterType="java.lang.Long" resultType="org.lis_entity.CollectionResult">
    select username,collection_id as collectionId,title,collection.create_time as createTime,article.article_id as articleId
    from collection inner join user on collection.user_id = user.user_id  inner join article on collection.article_id = article.article_id
    where user.user_id = #{userId}
  </select>
</mapper>
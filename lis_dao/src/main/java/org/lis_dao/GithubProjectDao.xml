<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.lis_dao.GithubProjectDao">
  <resultMap id="BaseResultMap" type="org.lis_entity.GithubProject">
    <id column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="project_address" jdbcType="VARCHAR" property="projectAddress" />
    <result column="project_language" jdbcType="VARCHAR" property="projectLanguage" />
    <result column="project_fork" jdbcType="BIGINT" property="projectFork" />
    <result column="project_star" jdbcType="BIGINT" property="projectStar" />
    <result column="project_issue" jdbcType="BIGINT" property="projectIssue" />
    <result column="project_readme" jdbcType="VARCHAR" property="projectReadme" />
    <result column="project_avatarurl" jdbcType="VARCHAR" property="projectAvatarurl" />
    <result column="project_author" jdbcType="VARCHAR" property="projectAuthor" />
    <result column="project_name" jdbcType="VARCHAR" property="projectName" />
    <result column="project_des" jdbcType="VARCHAR" property="projectDes" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    project_id, project_address, project_language, project_fork, project_star, project_issue, 
    project_readme, project_avatarurl, project_author, project_name, project_des
  </sql>
  <select id="selectByExample" parameterType="org.lis_entity.GithubProjectExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from github_project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from github_project
    where project_id = #{projectId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from github_project
    where project_id = #{projectId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.lis_entity.GithubProjectExample">
    delete from github_project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="project_id" keyProperty="projectId" parameterType="org.lis_entity.GithubProject" useGeneratedKeys="true">
    insert into github_project (project_address, project_language, 
      project_fork, project_star, project_issue, 
      project_readme, project_avatarurl, project_author, 
      project_name, project_des)
    values (#{projectAddress,jdbcType=VARCHAR}, #{projectLanguage,jdbcType=VARCHAR}, 
      #{projectFork,jdbcType=BIGINT}, #{projectStar,jdbcType=BIGINT}, #{projectIssue,jdbcType=BIGINT}, 
      #{projectReadme,jdbcType=VARCHAR}, #{projectAvatarurl,jdbcType=VARCHAR}, #{projectAuthor,jdbcType=VARCHAR}, 
      #{projectName,jdbcType=VARCHAR}, #{projectDes,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="project_id" keyProperty="projectId" parameterType="org.lis_entity.GithubProject" useGeneratedKeys="true">
    insert into github_project
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="projectAddress != null">
        project_address,
      </if>
      <if test="projectLanguage != null">
        project_language,
      </if>
      <if test="projectFork != null">
        project_fork,
      </if>
      <if test="projectStar != null">
        project_star,
      </if>
      <if test="projectIssue != null">
        project_issue,
      </if>
      <if test="projectReadme != null">
        project_readme,
      </if>
      <if test="projectAvatarurl != null">
        project_avatarurl,
      </if>
      <if test="projectAuthor != null">
        project_author,
      </if>
      <if test="projectName != null">
        project_name,
      </if>
      <if test="projectDes != null">
        project_des,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="projectAddress != null">
        #{projectAddress,jdbcType=VARCHAR},
      </if>
      <if test="projectLanguage != null">
        #{projectLanguage,jdbcType=VARCHAR},
      </if>
      <if test="projectFork != null">
        #{projectFork,jdbcType=BIGINT},
      </if>
      <if test="projectStar != null">
        #{projectStar,jdbcType=BIGINT},
      </if>
      <if test="projectIssue != null">
        #{projectIssue,jdbcType=BIGINT},
      </if>
      <if test="projectReadme != null">
        #{projectReadme,jdbcType=VARCHAR},
      </if>
      <if test="projectAvatarurl != null">
        #{projectAvatarurl,jdbcType=VARCHAR},
      </if>
      <if test="projectAuthor != null">
        #{projectAuthor,jdbcType=VARCHAR},
      </if>
      <if test="projectName != null">
        #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="projectDes != null">
        #{projectDes,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.lis_entity.GithubProjectExample" resultType="java.lang.Long">
    select count(*) from github_project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update github_project
    <set>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=BIGINT},
      </if>
      <if test="record.projectAddress != null">
        project_address = #{record.projectAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.projectLanguage != null">
        project_language = #{record.projectLanguage,jdbcType=VARCHAR},
      </if>
      <if test="record.projectFork != null">
        project_fork = #{record.projectFork,jdbcType=BIGINT},
      </if>
      <if test="record.projectStar != null">
        project_star = #{record.projectStar,jdbcType=BIGINT},
      </if>
      <if test="record.projectIssue != null">
        project_issue = #{record.projectIssue,jdbcType=BIGINT},
      </if>
      <if test="record.projectReadme != null">
        project_readme = #{record.projectReadme,jdbcType=VARCHAR},
      </if>
      <if test="record.projectAvatarurl != null">
        project_avatarurl = #{record.projectAvatarurl,jdbcType=VARCHAR},
      </if>
      <if test="record.projectAuthor != null">
        project_author = #{record.projectAuthor,jdbcType=VARCHAR},
      </if>
      <if test="record.projectName != null">
        project_name = #{record.projectName,jdbcType=VARCHAR},
      </if>
      <if test="record.projectDes != null">
        project_des = #{record.projectDes,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update github_project
    set project_id = #{record.projectId,jdbcType=BIGINT},
      project_address = #{record.projectAddress,jdbcType=VARCHAR},
      project_language = #{record.projectLanguage,jdbcType=VARCHAR},
      project_fork = #{record.projectFork,jdbcType=BIGINT},
      project_star = #{record.projectStar,jdbcType=BIGINT},
      project_issue = #{record.projectIssue,jdbcType=BIGINT},
      project_readme = #{record.projectReadme,jdbcType=VARCHAR},
      project_avatarurl = #{record.projectAvatarurl,jdbcType=VARCHAR},
      project_author = #{record.projectAuthor,jdbcType=VARCHAR},
      project_name = #{record.projectName,jdbcType=VARCHAR},
      project_des = #{record.projectDes,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.lis_entity.GithubProject">
    update github_project
    <set>
      <if test="projectAddress != null">
        project_address = #{projectAddress,jdbcType=VARCHAR},
      </if>
      <if test="projectLanguage != null">
        project_language = #{projectLanguage,jdbcType=VARCHAR},
      </if>
      <if test="projectFork != null">
        project_fork = #{projectFork,jdbcType=BIGINT},
      </if>
      <if test="projectStar != null">
        project_star = #{projectStar,jdbcType=BIGINT},
      </if>
      <if test="projectIssue != null">
        project_issue = #{projectIssue,jdbcType=BIGINT},
      </if>
      <if test="projectReadme != null">
        project_readme = #{projectReadme,jdbcType=VARCHAR},
      </if>
      <if test="projectAvatarurl != null">
        project_avatarurl = #{projectAvatarurl,jdbcType=VARCHAR},
      </if>
      <if test="projectAuthor != null">
        project_author = #{projectAuthor,jdbcType=VARCHAR},
      </if>
      <if test="projectName != null">
        project_name = #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="projectDes != null">
        project_des = #{projectDes,jdbcType=VARCHAR},
      </if>
    </set>
    where project_id = #{projectId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.lis_entity.GithubProject">
    update github_project
    set project_address = #{projectAddress,jdbcType=VARCHAR},
      project_language = #{projectLanguage,jdbcType=VARCHAR},
      project_fork = #{projectFork,jdbcType=BIGINT},
      project_star = #{projectStar,jdbcType=BIGINT},
      project_issue = #{projectIssue,jdbcType=BIGINT},
      project_readme = #{projectReadme,jdbcType=VARCHAR},
      project_avatarurl = #{projectAvatarurl,jdbcType=VARCHAR},
      project_author = #{projectAuthor,jdbcType=VARCHAR},
      project_name = #{projectName,jdbcType=VARCHAR},
      project_des = #{projectDes,jdbcType=VARCHAR}
    where project_id = #{projectId,jdbcType=BIGINT}
  </update>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.lis_dao.ReplayDao">
  <resultMap id="BaseResultMap" type="org.lis_entity.Replay">
    <id column="reply_id" jdbcType="BIGINT" property="replyId" />
    <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="comment_id" jdbcType="BIGINT" property="commentId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="replied_name" jdbcType="VARCHAR" property="repliedName" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    reply_id, reply_content, user_id, comment_id, create_time, replied_name
  </sql>
  <select id="selectByExample" parameterType="org.lis_entity.ReplayExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from replay
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from replay
    where reply_id = #{replyId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from replay
    where reply_id = #{replyId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.lis_entity.ReplayExample">
    delete from replay
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="reply_id" keyProperty="replyId" parameterType="org.lis_entity.Replay" useGeneratedKeys="true">
    insert into replay (reply_content, user_id, comment_id, 
      create_time, replied_name)
    values (#{replyContent,jdbcType=VARCHAR}, #{userId,jdbcType=BIGINT}, #{commentId,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{repliedName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="reply_id" keyProperty="replyId" parameterType="org.lis_entity.Replay" useGeneratedKeys="true">
    insert into replay
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="replyContent != null">
        reply_content,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="repliedName != null">
        replied_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="replyContent != null">
        #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="repliedName != null">
        #{repliedName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.lis_entity.ReplayExample" resultType="java.lang.Long">
    select count(*) from replay
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update replay
    <set>
      <if test="record.replyId != null">
        reply_id = #{record.replyId,jdbcType=BIGINT},
      </if>
      <if test="record.replyContent != null">
        reply_content = #{record.replyContent,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.commentId != null">
        comment_id = #{record.commentId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.repliedName != null">
        replied_name = #{record.repliedName,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update replay
    set reply_id = #{record.replyId,jdbcType=BIGINT},
      reply_content = #{record.replyContent,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=BIGINT},
      comment_id = #{record.commentId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      replied_name = #{record.repliedName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.lis_entity.Replay">
    update replay
    <set>
      <if test="replyContent != null">
        reply_content = #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="repliedName != null">
        replied_name = #{repliedName,jdbcType=VARCHAR},
      </if>
    </set>
    where reply_id = #{replyId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.lis_entity.Replay">
    update replay
    set reply_content = #{replyContent,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=BIGINT},
      comment_id = #{commentId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      replied_name = #{repliedName,jdbcType=VARCHAR}
    where reply_id = #{replyId,jdbcType=BIGINT}
  </update>
</mapper>